/*
 * FINBOURNE Identity Service API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.identity.api;

import com.finbourne.identity.ApiCallback;
import com.finbourne.identity.ApiClient;
import com.finbourne.identity.ApiException;
import com.finbourne.identity.ApiResponse;
import com.finbourne.identity.Configuration;
import com.finbourne.identity.Pair;
import com.finbourne.identity.ProgressRequestBody;
import com.finbourne.identity.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.finbourne.identity.model.AuthenticationInformation;
import com.finbourne.identity.model.LusidProblemDetails;
import com.finbourne.identity.model.LusidValidationProblemDetails;
import java.time.OffsetDateTime;
import com.finbourne.identity.model.PasswordPolicyResponse;
import com.finbourne.identity.model.SupportAccessRequest;
import com.finbourne.identity.model.SupportAccessResponse;
import com.finbourne.identity.model.SupportRolesResponse;
import com.finbourne.identity.model.UpdatePasswordPolicyRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AuthenticationApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AuthenticationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AuthenticationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getAuthenticationInformationCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/authentication/information";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAuthenticationInformationValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getAuthenticationInformationCall(_callback);

    }


    private ApiResponse<AuthenticationInformation> getAuthenticationInformationWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAuthenticationInformationValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<AuthenticationInformation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAuthenticationInformationAsync(final ApiCallback<AuthenticationInformation> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAuthenticationInformationValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<AuthenticationInformation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetAuthenticationInformationRequest {

        private APIgetAuthenticationInformationRequest() {
        }

        /**
         * Build call for getAuthenticationInformation
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Get authentication information </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAuthenticationInformationCall(_callback);
        }

        /**
         * Execute getAuthenticationInformation request
         * @return AuthenticationInformation
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Get authentication information </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public AuthenticationInformation execute() throws ApiException {
            ApiResponse<AuthenticationInformation> localVarResp = getAuthenticationInformationWithHttpInfo();
            return localVarResp.getData();
        }

        /**
         * Execute getAuthenticationInformation request with HTTP info returned
         * @return ApiResponse&lt;AuthenticationInformation&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Get authentication information </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AuthenticationInformation> executeWithHttpInfo() throws ApiException {
            return getAuthenticationInformationWithHttpInfo();
        }

        /**
         * Execute getAuthenticationInformation request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Get authentication information </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AuthenticationInformation> _callback) throws ApiException {
            return getAuthenticationInformationAsync(_callback);
        }
    }

    /**
     * GetAuthenticationInformation: Gets AuthenticationInformation
     * Get the AuthenticationInformation associated with the current domain. This includes all the  necessary information to login to this domain.
     * @return APIgetAuthenticationInformationRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get authentication information </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIgetAuthenticationInformationRequest getAuthenticationInformation() {
        return new APIgetAuthenticationInformationRequest();
    }
    private okhttp3.Call getPasswordPolicyCall(String userType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/authentication/password-policy/{userType}"
            .replace("{" + "userType" + "}", localVarApiClient.escapeString(userType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPasswordPolicyValidateBeforeCall(String userType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userType' is set
        if (userType == null) {
            throw new ApiException("Missing the required parameter 'userType' when calling getPasswordPolicy(Async)");
        }

        return getPasswordPolicyCall(userType, _callback);

    }


    private ApiResponse<PasswordPolicyResponse> getPasswordPolicyWithHttpInfo(String userType) throws ApiException {
        okhttp3.Call localVarCall = getPasswordPolicyValidateBeforeCall(userType, null);
        Type localVarReturnType = new TypeToken<PasswordPolicyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPasswordPolicyAsync(String userType, final ApiCallback<PasswordPolicyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPasswordPolicyValidateBeforeCall(userType, _callback);
        Type localVarReturnType = new TypeToken<PasswordPolicyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetPasswordPolicyRequest {
        private final String userType;

        private APIgetPasswordPolicyRequest(String userType) {
            this.userType = userType;
        }

        /**
         * Build call for getPasswordPolicy
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Get password policy </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPasswordPolicyCall(userType, _callback);
        }

        /**
         * Execute getPasswordPolicy request
         * @return PasswordPolicyResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Get password policy </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public PasswordPolicyResponse execute() throws ApiException {
            ApiResponse<PasswordPolicyResponse> localVarResp = getPasswordPolicyWithHttpInfo(userType);
            return localVarResp.getData();
        }

        /**
         * Execute getPasswordPolicy request with HTTP info returned
         * @return ApiResponse&lt;PasswordPolicyResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Get password policy </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PasswordPolicyResponse> executeWithHttpInfo() throws ApiException {
            return getPasswordPolicyWithHttpInfo(userType);
        }

        /**
         * Execute getPasswordPolicy request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Get password policy </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PasswordPolicyResponse> _callback) throws ApiException {
            return getPasswordPolicyAsync(userType, _callback);
        }
    }

    /**
     * [EXPERIMENTAL] GetPasswordPolicy: Gets password policy for a user type
     * Get the password policy for a given user type
     * @param userType The type of user (should only be personal or service) (required)
     * @return APIgetPasswordPolicyRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get password policy </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIgetPasswordPolicyRequest getPasswordPolicy(String userType) {
        return new APIgetPasswordPolicyRequest(userType);
    }
    private okhttp3.Call getSupportAccessHistoryCall(OffsetDateTime start, OffsetDateTime end, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/authentication/support";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (end != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end", end));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSupportAccessHistoryValidateBeforeCall(OffsetDateTime start, OffsetDateTime end, final ApiCallback _callback) throws ApiException {
        return getSupportAccessHistoryCall(start, end, _callback);

    }


    private ApiResponse<List<SupportAccessResponse>> getSupportAccessHistoryWithHttpInfo(OffsetDateTime start, OffsetDateTime end) throws ApiException {
        okhttp3.Call localVarCall = getSupportAccessHistoryValidateBeforeCall(start, end, null);
        Type localVarReturnType = new TypeToken<List<SupportAccessResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSupportAccessHistoryAsync(OffsetDateTime start, OffsetDateTime end, final ApiCallback<List<SupportAccessResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSupportAccessHistoryValidateBeforeCall(start, end, _callback);
        Type localVarReturnType = new TypeToken<List<SupportAccessResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetSupportAccessHistoryRequest {
        private OffsetDateTime start;
        private OffsetDateTime end;

        private APIgetSupportAccessHistoryRequest() {
        }

        /**
         * Set start
         * @param start The start expiry date to query support access requests from (optional)
         * @return APIgetSupportAccessHistoryRequest
         */
        public APIgetSupportAccessHistoryRequest start(OffsetDateTime start) {
            this.start = start;
            return this;
        }

        /**
         * Set end
         * @param end The end expiry date to query support access requests to (optional)
         * @return APIgetSupportAccessHistoryRequest
         */
        public APIgetSupportAccessHistoryRequest end(OffsetDateTime end) {
            this.end = end;
            return this;
        }

        /**
         * Build call for getSupportAccessHistory
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Get support access history </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSupportAccessHistoryCall(start, end, _callback);
        }

        /**
         * Execute getSupportAccessHistory request
         * @return List&lt;SupportAccessResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Get support access history </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public List<SupportAccessResponse> execute() throws ApiException {
            ApiResponse<List<SupportAccessResponse>> localVarResp = getSupportAccessHistoryWithHttpInfo(start, end);
            return localVarResp.getData();
        }

        /**
         * Execute getSupportAccessHistory request with HTTP info returned
         * @return ApiResponse&lt;List&lt;SupportAccessResponse&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Get support access history </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<SupportAccessResponse>> executeWithHttpInfo() throws ApiException {
            return getSupportAccessHistoryWithHttpInfo(start, end);
        }

        /**
         * Execute getSupportAccessHistory request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Get support access history </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<SupportAccessResponse>> _callback) throws ApiException {
            return getSupportAccessHistoryAsync(start, end, _callback);
        }
    }

    /**
     * GetSupportAccessHistory: Get the history of all support access granted and any information pertaining to their termination
     * The active and inactive support requests will be returned, inactive support requests will have information pertaining to their termination  including obfuscated userIds of those who created and terminated the request
     * @return APIgetSupportAccessHistoryRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get support access history </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIgetSupportAccessHistoryRequest getSupportAccessHistory() {
        return new APIgetSupportAccessHistoryRequest();
    }
    private okhttp3.Call getSupportRolesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/authentication/support-roles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSupportRolesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getSupportRolesCall(_callback);

    }


    private ApiResponse<SupportRolesResponse> getSupportRolesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getSupportRolesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<SupportRolesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSupportRolesAsync(final ApiCallback<SupportRolesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSupportRolesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<SupportRolesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetSupportRolesRequest {

        private APIgetSupportRolesRequest() {
        }

        /**
         * Build call for getSupportRoles
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Get support roles </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSupportRolesCall(_callback);
        }

        /**
         * Execute getSupportRoles request
         * @return SupportRolesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Get support roles </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public SupportRolesResponse execute() throws ApiException {
            ApiResponse<SupportRolesResponse> localVarResp = getSupportRolesWithHttpInfo();
            return localVarResp.getData();
        }

        /**
         * Execute getSupportRoles request with HTTP info returned
         * @return ApiResponse&lt;SupportRolesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Get support roles </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SupportRolesResponse> executeWithHttpInfo() throws ApiException {
            return getSupportRolesWithHttpInfo();
        }

        /**
         * Execute getSupportRoles request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Get support roles </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SupportRolesResponse> _callback) throws ApiException {
            return getSupportRolesAsync(_callback);
        }
    }

    /**
     * GetSupportRoles: Get mapping of support roles, the internal representation to a human friendly representation
     * Get mapping of support roles, the internal representation to a human friendly representation
     * @return APIgetSupportRolesRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get support roles </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIgetSupportRolesRequest getSupportRoles() {
        return new APIgetSupportRolesRequest();
    }
    private okhttp3.Call grantSupportAccessCall(SupportAccessRequest supportAccessRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = supportAccessRequest;

        // create path and map variables
        String localVarPath = "/api/authentication/support";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call grantSupportAccessValidateBeforeCall(SupportAccessRequest supportAccessRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'supportAccessRequest' is set
        if (supportAccessRequest == null) {
            throw new ApiException("Missing the required parameter 'supportAccessRequest' when calling grantSupportAccess(Async)");
        }

        return grantSupportAccessCall(supportAccessRequest, _callback);

    }


    private ApiResponse<SupportAccessResponse> grantSupportAccessWithHttpInfo(SupportAccessRequest supportAccessRequest) throws ApiException {
        okhttp3.Call localVarCall = grantSupportAccessValidateBeforeCall(supportAccessRequest, null);
        Type localVarReturnType = new TypeToken<SupportAccessResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call grantSupportAccessAsync(SupportAccessRequest supportAccessRequest, final ApiCallback<SupportAccessResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = grantSupportAccessValidateBeforeCall(supportAccessRequest, _callback);
        Type localVarReturnType = new TypeToken<SupportAccessResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgrantSupportAccessRequest {
        private final SupportAccessRequest supportAccessRequest;

        private APIgrantSupportAccessRequest(SupportAccessRequest supportAccessRequest) {
            this.supportAccessRequest = supportAccessRequest;
        }

        /**
         * Build call for grantSupportAccess
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Grant Support Access </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return grantSupportAccessCall(supportAccessRequest, _callback);
        }

        /**
         * Execute grantSupportAccess request
         * @return SupportAccessResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Grant Support Access </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public SupportAccessResponse execute() throws ApiException {
            ApiResponse<SupportAccessResponse> localVarResp = grantSupportAccessWithHttpInfo(supportAccessRequest);
            return localVarResp.getData();
        }

        /**
         * Execute grantSupportAccess request with HTTP info returned
         * @return ApiResponse&lt;SupportAccessResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Grant Support Access </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SupportAccessResponse> executeWithHttpInfo() throws ApiException {
            return grantSupportAccessWithHttpInfo(supportAccessRequest);
        }

        /**
         * Execute grantSupportAccess request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Grant Support Access </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SupportAccessResponse> _callback) throws ApiException {
            return grantSupportAccessAsync(supportAccessRequest, _callback);
        }
    }

    /**
     * GrantSupportAccess: Grants FINBOURNE support access to your account
     * Granting support access will allow FINBOURNE employees full access to your data with the express intent to investigate support issues  You can revoke this (and all) access at any time using the InvalidateSupportAccess endpoint.
     * @param supportAccessRequest Request detailing the duration and reasons for supplying support access (required)
     * @return APIgrantSupportAccessRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Grant Support Access </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIgrantSupportAccessRequest grantSupportAccess(SupportAccessRequest supportAccessRequest) {
        return new APIgrantSupportAccessRequest(supportAccessRequest);
    }
    private okhttp3.Call invalidateSupportAccessCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/authentication/support";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call invalidateSupportAccessValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return invalidateSupportAccessCall(_callback);

    }


    private ApiResponse<List<SupportAccessResponse>> invalidateSupportAccessWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = invalidateSupportAccessValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<SupportAccessResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call invalidateSupportAccessAsync(final ApiCallback<List<SupportAccessResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = invalidateSupportAccessValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<SupportAccessResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIinvalidateSupportAccessRequest {

        private APIinvalidateSupportAccessRequest() {
        }

        /**
         * Build call for invalidateSupportAccess
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Invalidate all currently active support requests </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return invalidateSupportAccessCall(_callback);
        }

        /**
         * Execute invalidateSupportAccess request
         * @return List&lt;SupportAccessResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Invalidate all currently active support requests </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public List<SupportAccessResponse> execute() throws ApiException {
            ApiResponse<List<SupportAccessResponse>> localVarResp = invalidateSupportAccessWithHttpInfo();
            return localVarResp.getData();
        }

        /**
         * Execute invalidateSupportAccess request with HTTP info returned
         * @return ApiResponse&lt;List&lt;SupportAccessResponse&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Invalidate all currently active support requests </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<SupportAccessResponse>> executeWithHttpInfo() throws ApiException {
            return invalidateSupportAccessWithHttpInfo();
        }

        /**
         * Execute invalidateSupportAccess request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Invalidate all currently active support requests </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<SupportAccessResponse>> _callback) throws ApiException {
            return invalidateSupportAccessAsync(_callback);
        }
    }

    /**
     * InvalidateSupportAccess: Revoke any FINBOURNE support access to your account
     * This will result in a loss of access to your data for all FINBOURNE support agents
     * @return APIinvalidateSupportAccessRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Invalidate all currently active support requests </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIinvalidateSupportAccessRequest invalidateSupportAccess() {
        return new APIinvalidateSupportAccessRequest();
    }
    private okhttp3.Call updatePasswordPolicyCall(String userType, UpdatePasswordPolicyRequest updatePasswordPolicyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updatePasswordPolicyRequest;

        // create path and map variables
        String localVarPath = "/api/authentication/password-policy/{userType}"
            .replace("{" + "userType" + "}", localVarApiClient.escapeString(userType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePasswordPolicyValidateBeforeCall(String userType, UpdatePasswordPolicyRequest updatePasswordPolicyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userType' is set
        if (userType == null) {
            throw new ApiException("Missing the required parameter 'userType' when calling updatePasswordPolicy(Async)");
        }

        return updatePasswordPolicyCall(userType, updatePasswordPolicyRequest, _callback);

    }


    private ApiResponse<PasswordPolicyResponse> updatePasswordPolicyWithHttpInfo(String userType, UpdatePasswordPolicyRequest updatePasswordPolicyRequest) throws ApiException {
        okhttp3.Call localVarCall = updatePasswordPolicyValidateBeforeCall(userType, updatePasswordPolicyRequest, null);
        Type localVarReturnType = new TypeToken<PasswordPolicyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updatePasswordPolicyAsync(String userType, UpdatePasswordPolicyRequest updatePasswordPolicyRequest, final ApiCallback<PasswordPolicyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePasswordPolicyValidateBeforeCall(userType, updatePasswordPolicyRequest, _callback);
        Type localVarReturnType = new TypeToken<PasswordPolicyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIupdatePasswordPolicyRequest {
        private final String userType;
        private UpdatePasswordPolicyRequest updatePasswordPolicyRequest;

        private APIupdatePasswordPolicyRequest(String userType) {
            this.userType = userType;
        }

        /**
         * Set updatePasswordPolicyRequest
         * @param updatePasswordPolicyRequest The password policy for the given user type (optional)
         * @return APIupdatePasswordPolicyRequest
         */
        public APIupdatePasswordPolicyRequest updatePasswordPolicyRequest(UpdatePasswordPolicyRequest updatePasswordPolicyRequest) {
            this.updatePasswordPolicyRequest = updatePasswordPolicyRequest;
            return this;
        }

        /**
         * Build call for updatePasswordPolicy
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Update password policy </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return updatePasswordPolicyCall(userType, updatePasswordPolicyRequest, _callback);
        }

        /**
         * Execute updatePasswordPolicy request
         * @return PasswordPolicyResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Update password policy </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public PasswordPolicyResponse execute() throws ApiException {
            ApiResponse<PasswordPolicyResponse> localVarResp = updatePasswordPolicyWithHttpInfo(userType, updatePasswordPolicyRequest);
            return localVarResp.getData();
        }

        /**
         * Execute updatePasswordPolicy request with HTTP info returned
         * @return ApiResponse&lt;PasswordPolicyResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Update password policy </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PasswordPolicyResponse> executeWithHttpInfo() throws ApiException {
            return updatePasswordPolicyWithHttpInfo(userType, updatePasswordPolicyRequest);
        }

        /**
         * Execute updatePasswordPolicy request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Update password policy </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PasswordPolicyResponse> _callback) throws ApiException {
            return updatePasswordPolicyAsync(userType, updatePasswordPolicyRequest, _callback);
        }
    }

    /**
     * [EXPERIMENTAL] UpdatePasswordPolicy: Updates password policy for a user type
     * Update the password policy for a given user type
     * @param userType The type of user (should only be personal or service) (required)
     * @return APIupdatePasswordPolicyRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update password policy </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIupdatePasswordPolicyRequest updatePasswordPolicy(String userType) {
        return new APIupdatePasswordPolicyRequest(userType);
    }
}
