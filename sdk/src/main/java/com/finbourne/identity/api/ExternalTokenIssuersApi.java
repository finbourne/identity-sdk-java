/*
 * FINBOURNE Identity Service API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.identity.api;

import com.finbourne.identity.ApiCallback;
import com.finbourne.identity.ApiClient;
import com.finbourne.identity.ApiException;
import com.finbourne.identity.ApiResponse;
import com.finbourne.identity.Configuration;
import com.finbourne.identity.Pair;
import com.finbourne.identity.ProgressRequestBody;
import com.finbourne.identity.ProgressResponseBody;
import com.finbourne.identity.extensions.ConfigurationOptions;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.finbourne.identity.model.CreateExternalTokenIssuerRequest;
import com.finbourne.identity.model.ExternalTokenIssuerResponse;
import com.finbourne.identity.model.LusidProblemDetails;
import com.finbourne.identity.model.LusidValidationProblemDetails;
import com.finbourne.identity.model.UpdateExternalTokenIssuerRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ExternalTokenIssuersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ExternalTokenIssuersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ExternalTokenIssuersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createExternalTokenIssuerCall(CreateExternalTokenIssuerRequest createExternalTokenIssuerRequest, final ApiCallback _callback) throws ApiException {
        return createExternalTokenIssuerCall(createExternalTokenIssuerRequest,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call createExternalTokenIssuerCall(CreateExternalTokenIssuerRequest createExternalTokenIssuerRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createExternalTokenIssuerRequest;

        // create path and map variables
        String localVarPath = "/api/externaltokenissuers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createExternalTokenIssuerValidateBeforeCall(CreateExternalTokenIssuerRequest createExternalTokenIssuerRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'createExternalTokenIssuerRequest' is set
        if (createExternalTokenIssuerRequest == null) {
            throw new ApiException("Missing the required parameter 'createExternalTokenIssuerRequest' when calling createExternalTokenIssuer(Async)");
        }

        return createExternalTokenIssuerCall(createExternalTokenIssuerRequest, _callback, opts);

    }


    private ApiResponse<ExternalTokenIssuerResponse> createExternalTokenIssuerWithHttpInfo(CreateExternalTokenIssuerRequest createExternalTokenIssuerRequest) throws ApiException {
        okhttp3.Call localVarCall = createExternalTokenIssuerValidateBeforeCall(createExternalTokenIssuerRequest, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<ExternalTokenIssuerResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<ExternalTokenIssuerResponse> createExternalTokenIssuerWithHttpInfo(CreateExternalTokenIssuerRequest createExternalTokenIssuerRequest, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = createExternalTokenIssuerValidateBeforeCall(createExternalTokenIssuerRequest, null, opts);
        Type localVarReturnType = new TypeToken<ExternalTokenIssuerResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createExternalTokenIssuerAsync(CreateExternalTokenIssuerRequest createExternalTokenIssuerRequest, final ApiCallback<ExternalTokenIssuerResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createExternalTokenIssuerValidateBeforeCall(createExternalTokenIssuerRequest, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<ExternalTokenIssuerResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call createExternalTokenIssuerAsync(CreateExternalTokenIssuerRequest createExternalTokenIssuerRequest, final ApiCallback<ExternalTokenIssuerResponse> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = createExternalTokenIssuerValidateBeforeCall(createExternalTokenIssuerRequest, _callback, opts);
        Type localVarReturnType = new TypeToken<ExternalTokenIssuerResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreateExternalTokenIssuerRequest {
        private final CreateExternalTokenIssuerRequest createExternalTokenIssuerRequest;

        private APIcreateExternalTokenIssuerRequest(CreateExternalTokenIssuerRequest createExternalTokenIssuerRequest) {
            this.createExternalTokenIssuerRequest = createExternalTokenIssuerRequest;
        }

        /**
         * Build call for createExternalTokenIssuer
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Create External Token Issuer </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createExternalTokenIssuerCall(createExternalTokenIssuerRequest, _callback);
        }

        /**
         * Execute createExternalTokenIssuer request
         * @return ExternalTokenIssuerResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Create External Token Issuer </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ExternalTokenIssuerResponse execute() throws ApiException {
            ApiResponse<ExternalTokenIssuerResponse> localVarResp = createExternalTokenIssuerWithHttpInfo(createExternalTokenIssuerRequest);
            return localVarResp.getData();
        }

        /**
         * Execute createExternalTokenIssuer request. Use any specified configuration options to override any other configuration for this request only.
         * @return ExternalTokenIssuerResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Create External Token Issuer </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ExternalTokenIssuerResponse execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<ExternalTokenIssuerResponse> localVarResp = createExternalTokenIssuerWithHttpInfo(createExternalTokenIssuerRequest, opts);
            return localVarResp.getData();
        }

        /**
         * Execute createExternalTokenIssuer request with HTTP info returned
         * @return ApiResponse&lt;ExternalTokenIssuerResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Create External Token Issuer </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ExternalTokenIssuerResponse> executeWithHttpInfo() throws ApiException {
            return createExternalTokenIssuerWithHttpInfo(createExternalTokenIssuerRequest);
        }

        /**
         * Execute createExternalTokenIssuer request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;ExternalTokenIssuerResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Create External Token Issuer </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ExternalTokenIssuerResponse> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return createExternalTokenIssuerWithHttpInfo(createExternalTokenIssuerRequest, opts);
        }

        /**
         * Execute createExternalTokenIssuer request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Create External Token Issuer </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ExternalTokenIssuerResponse> _callback) throws ApiException {
            return createExternalTokenIssuerAsync(createExternalTokenIssuerRequest, _callback);
        }

        /**
         * Execute createExternalTokenIssuer request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Create External Token Issuer </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ExternalTokenIssuerResponse> _callback, ConfigurationOptions opts) throws ApiException {
            return createExternalTokenIssuerAsync(createExternalTokenIssuerRequest, _callback, opts);
        }
    }

    /**
     * [EARLY ACCESS] CreateExternalTokenIssuer: Create an External Token Issuer
     * Creates an External Token Issuer
     * @param createExternalTokenIssuerRequest  (required)
     * @return APIcreateExternalTokenIssuerRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create External Token Issuer </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateExternalTokenIssuerRequest createExternalTokenIssuer(CreateExternalTokenIssuerRequest createExternalTokenIssuerRequest) {
        return new APIcreateExternalTokenIssuerRequest(createExternalTokenIssuerRequest);
    }
    private okhttp3.Call deleteExternalTokenIssuerCall(String code, final ApiCallback _callback) throws ApiException {
        return deleteExternalTokenIssuerCall(code,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call deleteExternalTokenIssuerCall(String code, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/externaltokenissuers/{code}"
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteExternalTokenIssuerValidateBeforeCall(String code, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling deleteExternalTokenIssuer(Async)");
        }

        return deleteExternalTokenIssuerCall(code, _callback, opts);

    }


    private ApiResponse<Void> deleteExternalTokenIssuerWithHttpInfo(String code) throws ApiException {
        okhttp3.Call localVarCall = deleteExternalTokenIssuerValidateBeforeCall(code, null, new ConfigurationOptions());
        return localVarApiClient.execute(localVarCall);
    }

    private ApiResponse<Void> deleteExternalTokenIssuerWithHttpInfo(String code, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = deleteExternalTokenIssuerValidateBeforeCall(code, null, opts);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteExternalTokenIssuerAsync(String code, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteExternalTokenIssuerValidateBeforeCall(code, _callback, new ConfigurationOptions());
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    private okhttp3.Call deleteExternalTokenIssuerAsync(String code, final ApiCallback<Void> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = deleteExternalTokenIssuerValidateBeforeCall(code, _callback, opts);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIdeleteExternalTokenIssuerRequest {
        private final String code;

        private APIdeleteExternalTokenIssuerRequest(String code) {
            this.code = code;
        }

        /**
         * Build call for deleteExternalTokenIssuer
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteExternalTokenIssuerCall(code, _callback);
        }

        /**
         * Execute deleteExternalTokenIssuer request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteExternalTokenIssuerWithHttpInfo(code);
        }

        /**
         * Execute deleteExternalTokenIssuer request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public void execute(ConfigurationOptions opts) throws ApiException {
            deleteExternalTokenIssuerWithHttpInfo(code, opts);
        }

        /**
         * Execute deleteExternalTokenIssuer request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteExternalTokenIssuerWithHttpInfo(code);
        }

        /**
         * Execute deleteExternalTokenIssuer request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return deleteExternalTokenIssuerWithHttpInfo(code, opts);
        }

        /**
         * Execute deleteExternalTokenIssuer request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteExternalTokenIssuerAsync(code, _callback);
        }

        /**
         * Execute deleteExternalTokenIssuer request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback, ConfigurationOptions opts) throws ApiException {
            return deleteExternalTokenIssuerAsync(code, _callback, opts);
        }
    }

    /**
     * [EARLY ACCESS] DeleteExternalTokenIssuer: Deletes an External Token Issuer by code
     * Deletes an External Token Issuer
     * @param code Identifier of the External Token Issuer to delete (required)
     * @return APIdeleteExternalTokenIssuerRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteExternalTokenIssuerRequest deleteExternalTokenIssuer(String code) {
        return new APIdeleteExternalTokenIssuerRequest(code);
    }
    private okhttp3.Call getExternalTokenIssuerCall(String code, final ApiCallback _callback) throws ApiException {
        return getExternalTokenIssuerCall(code,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call getExternalTokenIssuerCall(String code, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/externaltokenissuers/{code}"
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getExternalTokenIssuerValidateBeforeCall(String code, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling getExternalTokenIssuer(Async)");
        }

        return getExternalTokenIssuerCall(code, _callback, opts);

    }


    private ApiResponse<ExternalTokenIssuerResponse> getExternalTokenIssuerWithHttpInfo(String code) throws ApiException {
        okhttp3.Call localVarCall = getExternalTokenIssuerValidateBeforeCall(code, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<ExternalTokenIssuerResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<ExternalTokenIssuerResponse> getExternalTokenIssuerWithHttpInfo(String code, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = getExternalTokenIssuerValidateBeforeCall(code, null, opts);
        Type localVarReturnType = new TypeToken<ExternalTokenIssuerResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getExternalTokenIssuerAsync(String code, final ApiCallback<ExternalTokenIssuerResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getExternalTokenIssuerValidateBeforeCall(code, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<ExternalTokenIssuerResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call getExternalTokenIssuerAsync(String code, final ApiCallback<ExternalTokenIssuerResponse> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = getExternalTokenIssuerValidateBeforeCall(code, _callback, opts);
        Type localVarReturnType = new TypeToken<ExternalTokenIssuerResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetExternalTokenIssuerRequest {
        private final String code;

        private APIgetExternalTokenIssuerRequest(String code) {
            this.code = code;
        }

        /**
         * Build call for getExternalTokenIssuer
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Get External Token Issuer </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getExternalTokenIssuerCall(code, _callback);
        }

        /**
         * Execute getExternalTokenIssuer request
         * @return ExternalTokenIssuerResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Get External Token Issuer </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ExternalTokenIssuerResponse execute() throws ApiException {
            ApiResponse<ExternalTokenIssuerResponse> localVarResp = getExternalTokenIssuerWithHttpInfo(code);
            return localVarResp.getData();
        }

        /**
         * Execute getExternalTokenIssuer request. Use any specified configuration options to override any other configuration for this request only.
         * @return ExternalTokenIssuerResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Get External Token Issuer </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ExternalTokenIssuerResponse execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<ExternalTokenIssuerResponse> localVarResp = getExternalTokenIssuerWithHttpInfo(code, opts);
            return localVarResp.getData();
        }

        /**
         * Execute getExternalTokenIssuer request with HTTP info returned
         * @return ApiResponse&lt;ExternalTokenIssuerResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Get External Token Issuer </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ExternalTokenIssuerResponse> executeWithHttpInfo() throws ApiException {
            return getExternalTokenIssuerWithHttpInfo(code);
        }

        /**
         * Execute getExternalTokenIssuer request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;ExternalTokenIssuerResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Get External Token Issuer </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ExternalTokenIssuerResponse> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return getExternalTokenIssuerWithHttpInfo(code, opts);
        }

        /**
         * Execute getExternalTokenIssuer request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Get External Token Issuer </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ExternalTokenIssuerResponse> _callback) throws ApiException {
            return getExternalTokenIssuerAsync(code, _callback);
        }

        /**
         * Execute getExternalTokenIssuer request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Get External Token Issuer </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ExternalTokenIssuerResponse> _callback, ConfigurationOptions opts) throws ApiException {
            return getExternalTokenIssuerAsync(code, _callback, opts);
        }
    }

    /**
     * [EARLY ACCESS] GetExternalTokenIssuer: Gets an External Token Issuer with code
     * Gets an External Token Issuer
     * @param code Identifier of the External Token Issuer (required)
     * @return APIgetExternalTokenIssuerRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get External Token Issuer </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIgetExternalTokenIssuerRequest getExternalTokenIssuer(String code) {
        return new APIgetExternalTokenIssuerRequest(code);
    }
    private okhttp3.Call listExternalTokenIssuersCall(final ApiCallback _callback) throws ApiException {
        return listExternalTokenIssuersCall( _callback, new ConfigurationOptions());
    }

    private okhttp3.Call listExternalTokenIssuersCall(final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/externaltokenissuers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listExternalTokenIssuersValidateBeforeCall(final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        return listExternalTokenIssuersCall(_callback, opts);

    }


    private ApiResponse<List<ExternalTokenIssuerResponse>> listExternalTokenIssuersWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listExternalTokenIssuersValidateBeforeCall(null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<List<ExternalTokenIssuerResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<List<ExternalTokenIssuerResponse>> listExternalTokenIssuersWithHttpInfo(ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = listExternalTokenIssuersValidateBeforeCall(null, opts);
        Type localVarReturnType = new TypeToken<List<ExternalTokenIssuerResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listExternalTokenIssuersAsync(final ApiCallback<List<ExternalTokenIssuerResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listExternalTokenIssuersValidateBeforeCall(_callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<List<ExternalTokenIssuerResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call listExternalTokenIssuersAsync(final ApiCallback<List<ExternalTokenIssuerResponse>> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = listExternalTokenIssuersValidateBeforeCall(_callback, opts);
        Type localVarReturnType = new TypeToken<List<ExternalTokenIssuerResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistExternalTokenIssuersRequest {

        private APIlistExternalTokenIssuersRequest() {
        }

        /**
         * Build call for listExternalTokenIssuers
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List External Token Issuers </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listExternalTokenIssuersCall(_callback);
        }

        /**
         * Execute listExternalTokenIssuers request
         * @return List&lt;ExternalTokenIssuerResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List External Token Issuers </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public List<ExternalTokenIssuerResponse> execute() throws ApiException {
            ApiResponse<List<ExternalTokenIssuerResponse>> localVarResp = listExternalTokenIssuersWithHttpInfo();
            return localVarResp.getData();
        }

        /**
         * Execute listExternalTokenIssuers request. Use any specified configuration options to override any other configuration for this request only.
         * @return List&lt;ExternalTokenIssuerResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List External Token Issuers </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public List<ExternalTokenIssuerResponse> execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<List<ExternalTokenIssuerResponse>> localVarResp = listExternalTokenIssuersWithHttpInfo(opts);
            return localVarResp.getData();
        }

        /**
         * Execute listExternalTokenIssuers request with HTTP info returned
         * @return ApiResponse&lt;List&lt;ExternalTokenIssuerResponse&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List External Token Issuers </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<ExternalTokenIssuerResponse>> executeWithHttpInfo() throws ApiException {
            return listExternalTokenIssuersWithHttpInfo();
        }

        /**
         * Execute listExternalTokenIssuers request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;List&lt;ExternalTokenIssuerResponse&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List External Token Issuers </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<ExternalTokenIssuerResponse>> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return listExternalTokenIssuersWithHttpInfo(opts);
        }

        /**
         * Execute listExternalTokenIssuers request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List External Token Issuers </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<ExternalTokenIssuerResponse>> _callback) throws ApiException {
            return listExternalTokenIssuersAsync(_callback);
        }

        /**
         * Execute listExternalTokenIssuers request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List External Token Issuers </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<ExternalTokenIssuerResponse>> _callback, ConfigurationOptions opts) throws ApiException {
            return listExternalTokenIssuersAsync(_callback, opts);
        }
    }

    /**
     * [EARLY ACCESS] ListExternalTokenIssuers: Lists all External Token Issuers for a domain
     * Lists all External Token Issuers
     * @return APIlistExternalTokenIssuersRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List External Token Issuers </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIlistExternalTokenIssuersRequest listExternalTokenIssuers() {
        return new APIlistExternalTokenIssuersRequest();
    }
    private okhttp3.Call updateExternalTokenIssuerCall(String code, UpdateExternalTokenIssuerRequest updateExternalTokenIssuerRequest, final ApiCallback _callback) throws ApiException {
        return updateExternalTokenIssuerCall(code, updateExternalTokenIssuerRequest,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call updateExternalTokenIssuerCall(String code, UpdateExternalTokenIssuerRequest updateExternalTokenIssuerRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateExternalTokenIssuerRequest;

        // create path and map variables
        String localVarPath = "/api/externaltokenissuers/{code}"
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateExternalTokenIssuerValidateBeforeCall(String code, UpdateExternalTokenIssuerRequest updateExternalTokenIssuerRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling updateExternalTokenIssuer(Async)");
        }

        // verify the required parameter 'updateExternalTokenIssuerRequest' is set
        if (updateExternalTokenIssuerRequest == null) {
            throw new ApiException("Missing the required parameter 'updateExternalTokenIssuerRequest' when calling updateExternalTokenIssuer(Async)");
        }

        return updateExternalTokenIssuerCall(code, updateExternalTokenIssuerRequest, _callback, opts);

    }


    private ApiResponse<ExternalTokenIssuerResponse> updateExternalTokenIssuerWithHttpInfo(String code, UpdateExternalTokenIssuerRequest updateExternalTokenIssuerRequest) throws ApiException {
        okhttp3.Call localVarCall = updateExternalTokenIssuerValidateBeforeCall(code, updateExternalTokenIssuerRequest, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<ExternalTokenIssuerResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<ExternalTokenIssuerResponse> updateExternalTokenIssuerWithHttpInfo(String code, UpdateExternalTokenIssuerRequest updateExternalTokenIssuerRequest, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = updateExternalTokenIssuerValidateBeforeCall(code, updateExternalTokenIssuerRequest, null, opts);
        Type localVarReturnType = new TypeToken<ExternalTokenIssuerResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateExternalTokenIssuerAsync(String code, UpdateExternalTokenIssuerRequest updateExternalTokenIssuerRequest, final ApiCallback<ExternalTokenIssuerResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateExternalTokenIssuerValidateBeforeCall(code, updateExternalTokenIssuerRequest, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<ExternalTokenIssuerResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call updateExternalTokenIssuerAsync(String code, UpdateExternalTokenIssuerRequest updateExternalTokenIssuerRequest, final ApiCallback<ExternalTokenIssuerResponse> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = updateExternalTokenIssuerValidateBeforeCall(code, updateExternalTokenIssuerRequest, _callback, opts);
        Type localVarReturnType = new TypeToken<ExternalTokenIssuerResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIupdateExternalTokenIssuerRequest {
        private final String code;
        private final UpdateExternalTokenIssuerRequest updateExternalTokenIssuerRequest;

        private APIupdateExternalTokenIssuerRequest(String code, UpdateExternalTokenIssuerRequest updateExternalTokenIssuerRequest) {
            this.code = code;
            this.updateExternalTokenIssuerRequest = updateExternalTokenIssuerRequest;
        }

        /**
         * Build call for updateExternalTokenIssuer
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Update External Token Issuer </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return updateExternalTokenIssuerCall(code, updateExternalTokenIssuerRequest, _callback);
        }

        /**
         * Execute updateExternalTokenIssuer request
         * @return ExternalTokenIssuerResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Update External Token Issuer </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ExternalTokenIssuerResponse execute() throws ApiException {
            ApiResponse<ExternalTokenIssuerResponse> localVarResp = updateExternalTokenIssuerWithHttpInfo(code, updateExternalTokenIssuerRequest);
            return localVarResp.getData();
        }

        /**
         * Execute updateExternalTokenIssuer request. Use any specified configuration options to override any other configuration for this request only.
         * @return ExternalTokenIssuerResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Update External Token Issuer </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ExternalTokenIssuerResponse execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<ExternalTokenIssuerResponse> localVarResp = updateExternalTokenIssuerWithHttpInfo(code, updateExternalTokenIssuerRequest, opts);
            return localVarResp.getData();
        }

        /**
         * Execute updateExternalTokenIssuer request with HTTP info returned
         * @return ApiResponse&lt;ExternalTokenIssuerResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Update External Token Issuer </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ExternalTokenIssuerResponse> executeWithHttpInfo() throws ApiException {
            return updateExternalTokenIssuerWithHttpInfo(code, updateExternalTokenIssuerRequest);
        }

        /**
         * Execute updateExternalTokenIssuer request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;ExternalTokenIssuerResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Update External Token Issuer </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ExternalTokenIssuerResponse> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return updateExternalTokenIssuerWithHttpInfo(code, updateExternalTokenIssuerRequest, opts);
        }

        /**
         * Execute updateExternalTokenIssuer request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Update External Token Issuer </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ExternalTokenIssuerResponse> _callback) throws ApiException {
            return updateExternalTokenIssuerAsync(code, updateExternalTokenIssuerRequest, _callback);
        }

        /**
         * Execute updateExternalTokenIssuer request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Update External Token Issuer </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ExternalTokenIssuerResponse> _callback, ConfigurationOptions opts) throws ApiException {
            return updateExternalTokenIssuerAsync(code, updateExternalTokenIssuerRequest, _callback, opts);
        }
    }

    /**
     * [EARLY ACCESS] UpdateExternalTokenIssuer: Updates an existing External Token Issuer
     * Updates an External Token Issuer
     * @param code Identifier of the External Token Issuer to update (required)
     * @param updateExternalTokenIssuerRequest  (required)
     * @return APIupdateExternalTokenIssuerRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update External Token Issuer </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIupdateExternalTokenIssuerRequest updateExternalTokenIssuer(String code, UpdateExternalTokenIssuerRequest updateExternalTokenIssuerRequest) {
        return new APIupdateExternalTokenIssuerRequest(code, updateExternalTokenIssuerRequest);
    }
}
