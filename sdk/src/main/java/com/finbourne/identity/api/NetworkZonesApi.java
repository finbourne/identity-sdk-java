/*
 * FINBOURNE Identity Service API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.identity.api;

import com.finbourne.identity.ApiCallback;
import com.finbourne.identity.ApiClient;
import com.finbourne.identity.ApiException;
import com.finbourne.identity.ApiResponse;
import com.finbourne.identity.Configuration;
import com.finbourne.identity.Pair;
import com.finbourne.identity.ProgressRequestBody;
import com.finbourne.identity.ProgressResponseBody;
import com.finbourne.identity.extensions.ConfigurationOptions;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.finbourne.identity.model.CreateNetworkZoneRequest;
import com.finbourne.identity.model.LusidProblemDetails;
import com.finbourne.identity.model.LusidValidationProblemDetails;
import com.finbourne.identity.model.NetworkZoneDefinitionResponse;
import com.finbourne.identity.model.UpdateNetworkZoneRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class NetworkZonesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public NetworkZonesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public NetworkZonesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNetworkZoneCall(CreateNetworkZoneRequest createNetworkZoneRequest, final ApiCallback _callback) throws ApiException {
        return createNetworkZoneCall(createNetworkZoneRequest,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call createNetworkZoneCall(CreateNetworkZoneRequest createNetworkZoneRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createNetworkZoneRequest;

        // create path and map variables
        String localVarPath = "/api/networkzones";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNetworkZoneValidateBeforeCall(CreateNetworkZoneRequest createNetworkZoneRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'createNetworkZoneRequest' is set
        if (createNetworkZoneRequest == null) {
            throw new ApiException("Missing the required parameter 'createNetworkZoneRequest' when calling createNetworkZone(Async)");
        }

        return createNetworkZoneCall(createNetworkZoneRequest, _callback, opts);

    }


    private ApiResponse<NetworkZoneDefinitionResponse> createNetworkZoneWithHttpInfo(CreateNetworkZoneRequest createNetworkZoneRequest) throws ApiException {
        okhttp3.Call localVarCall = createNetworkZoneValidateBeforeCall(createNetworkZoneRequest, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<NetworkZoneDefinitionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<NetworkZoneDefinitionResponse> createNetworkZoneWithHttpInfo(CreateNetworkZoneRequest createNetworkZoneRequest, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = createNetworkZoneValidateBeforeCall(createNetworkZoneRequest, null, opts);
        Type localVarReturnType = new TypeToken<NetworkZoneDefinitionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNetworkZoneAsync(CreateNetworkZoneRequest createNetworkZoneRequest, final ApiCallback<NetworkZoneDefinitionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNetworkZoneValidateBeforeCall(createNetworkZoneRequest, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<NetworkZoneDefinitionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call createNetworkZoneAsync(CreateNetworkZoneRequest createNetworkZoneRequest, final ApiCallback<NetworkZoneDefinitionResponse> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = createNetworkZoneValidateBeforeCall(createNetworkZoneRequest, _callback, opts);
        Type localVarReturnType = new TypeToken<NetworkZoneDefinitionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreateNetworkZoneRequest {
        private final CreateNetworkZoneRequest createNetworkZoneRequest;

        private APIcreateNetworkZoneRequest(CreateNetworkZoneRequest createNetworkZoneRequest) {
            this.createNetworkZoneRequest = createNetworkZoneRequest;
        }

        /**
         * Build call for createNetworkZone
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Create Network Zone </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createNetworkZoneCall(createNetworkZoneRequest, _callback);
        }

        /**
         * Execute createNetworkZone request
         * @return NetworkZoneDefinitionResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Create Network Zone </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public NetworkZoneDefinitionResponse execute() throws ApiException {
            ApiResponse<NetworkZoneDefinitionResponse> localVarResp = createNetworkZoneWithHttpInfo(createNetworkZoneRequest);
            return localVarResp.getData();
        }

        /**
         * Execute createNetworkZone request. Use any specified configuration options to override any other configuration for this request only.
         * @return NetworkZoneDefinitionResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Create Network Zone </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public NetworkZoneDefinitionResponse execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<NetworkZoneDefinitionResponse> localVarResp = createNetworkZoneWithHttpInfo(createNetworkZoneRequest, opts);
            return localVarResp.getData();
        }

        /**
         * Execute createNetworkZone request with HTTP info returned
         * @return ApiResponse&lt;NetworkZoneDefinitionResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Create Network Zone </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<NetworkZoneDefinitionResponse> executeWithHttpInfo() throws ApiException {
            return createNetworkZoneWithHttpInfo(createNetworkZoneRequest);
        }

        /**
         * Execute createNetworkZone request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;NetworkZoneDefinitionResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Create Network Zone </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<NetworkZoneDefinitionResponse> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return createNetworkZoneWithHttpInfo(createNetworkZoneRequest, opts);
        }

        /**
         * Execute createNetworkZone request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Create Network Zone </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<NetworkZoneDefinitionResponse> _callback) throws ApiException {
            return createNetworkZoneAsync(createNetworkZoneRequest, _callback);
        }

        /**
         * Execute createNetworkZone request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Create Network Zone </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<NetworkZoneDefinitionResponse> _callback, ConfigurationOptions opts) throws ApiException {
            return createNetworkZoneAsync(createNetworkZoneRequest, _callback, opts);
        }
    }

    /**
     * [BETA] CreateNetworkZone: Creates a network zone
     * By default, the network zone will have its hierarchy set to last on creation.
     * @param createNetworkZoneRequest The details of the network zone to define (required)
     * @return APIcreateNetworkZoneRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create Network Zone </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateNetworkZoneRequest createNetworkZone(CreateNetworkZoneRequest createNetworkZoneRequest) {
        return new APIcreateNetworkZoneRequest(createNetworkZoneRequest);
    }
    private okhttp3.Call deleteNetworkZoneCall(String code, final ApiCallback _callback) throws ApiException {
        return deleteNetworkZoneCall(code,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call deleteNetworkZoneCall(String code, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/networkzones/{code}"
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteNetworkZoneValidateBeforeCall(String code, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling deleteNetworkZone(Async)");
        }

        return deleteNetworkZoneCall(code, _callback, opts);

    }


    private ApiResponse<Void> deleteNetworkZoneWithHttpInfo(String code) throws ApiException {
        okhttp3.Call localVarCall = deleteNetworkZoneValidateBeforeCall(code, null, new ConfigurationOptions());
        return localVarApiClient.execute(localVarCall);
    }

    private ApiResponse<Void> deleteNetworkZoneWithHttpInfo(String code, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = deleteNetworkZoneValidateBeforeCall(code, null, opts);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteNetworkZoneAsync(String code, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteNetworkZoneValidateBeforeCall(code, _callback, new ConfigurationOptions());
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    private okhttp3.Call deleteNetworkZoneAsync(String code, final ApiCallback<Void> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = deleteNetworkZoneValidateBeforeCall(code, _callback, opts);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIdeleteNetworkZoneRequest {
        private final String code;

        private APIdeleteNetworkZoneRequest(String code) {
            this.code = code;
        }

        /**
         * Build call for deleteNetworkZone
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteNetworkZoneCall(code, _callback);
        }

        /**
         * Execute deleteNetworkZone request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteNetworkZoneWithHttpInfo(code);
        }

        /**
         * Execute deleteNetworkZone request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public void execute(ConfigurationOptions opts) throws ApiException {
            deleteNetworkZoneWithHttpInfo(code, opts);
        }

        /**
         * Execute deleteNetworkZone request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteNetworkZoneWithHttpInfo(code);
        }

        /**
         * Execute deleteNetworkZone request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return deleteNetworkZoneWithHttpInfo(code, opts);
        }

        /**
         * Execute deleteNetworkZone request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteNetworkZoneAsync(code, _callback);
        }

        /**
         * Execute deleteNetworkZone request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback, ConfigurationOptions opts) throws ApiException {
            return deleteNetworkZoneAsync(code, _callback, opts);
        }
    }

    /**
     * [BETA] DeleteNetworkZone: Deletes a network zone
     * Will return a success if network zone already deleted
     * @param code The unique identifier of the network zone to delete (required)
     * @return APIdeleteNetworkZoneRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteNetworkZoneRequest deleteNetworkZone(String code) {
        return new APIdeleteNetworkZoneRequest(code);
    }
    private okhttp3.Call getNetworkZoneCall(String code, final ApiCallback _callback) throws ApiException {
        return getNetworkZoneCall(code,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call getNetworkZoneCall(String code, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/networkzones/{code}"
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkZoneValidateBeforeCall(String code, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling getNetworkZone(Async)");
        }

        return getNetworkZoneCall(code, _callback, opts);

    }


    private ApiResponse<NetworkZoneDefinitionResponse> getNetworkZoneWithHttpInfo(String code) throws ApiException {
        okhttp3.Call localVarCall = getNetworkZoneValidateBeforeCall(code, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<NetworkZoneDefinitionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<NetworkZoneDefinitionResponse> getNetworkZoneWithHttpInfo(String code, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = getNetworkZoneValidateBeforeCall(code, null, opts);
        Type localVarReturnType = new TypeToken<NetworkZoneDefinitionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getNetworkZoneAsync(String code, final ApiCallback<NetworkZoneDefinitionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkZoneValidateBeforeCall(code, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<NetworkZoneDefinitionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call getNetworkZoneAsync(String code, final ApiCallback<NetworkZoneDefinitionResponse> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = getNetworkZoneValidateBeforeCall(code, _callback, opts);
        Type localVarReturnType = new TypeToken<NetworkZoneDefinitionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetNetworkZoneRequest {
        private final String code;

        private APIgetNetworkZoneRequest(String code) {
            this.code = code;
        }

        /**
         * Build call for getNetworkZone
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Get Network Zone </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getNetworkZoneCall(code, _callback);
        }

        /**
         * Execute getNetworkZone request
         * @return NetworkZoneDefinitionResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Get Network Zone </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public NetworkZoneDefinitionResponse execute() throws ApiException {
            ApiResponse<NetworkZoneDefinitionResponse> localVarResp = getNetworkZoneWithHttpInfo(code);
            return localVarResp.getData();
        }

        /**
         * Execute getNetworkZone request. Use any specified configuration options to override any other configuration for this request only.
         * @return NetworkZoneDefinitionResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Get Network Zone </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public NetworkZoneDefinitionResponse execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<NetworkZoneDefinitionResponse> localVarResp = getNetworkZoneWithHttpInfo(code, opts);
            return localVarResp.getData();
        }

        /**
         * Execute getNetworkZone request with HTTP info returned
         * @return ApiResponse&lt;NetworkZoneDefinitionResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Get Network Zone </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<NetworkZoneDefinitionResponse> executeWithHttpInfo() throws ApiException {
            return getNetworkZoneWithHttpInfo(code);
        }

        /**
         * Execute getNetworkZone request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;NetworkZoneDefinitionResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Get Network Zone </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<NetworkZoneDefinitionResponse> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return getNetworkZoneWithHttpInfo(code, opts);
        }

        /**
         * Execute getNetworkZone request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Get Network Zone </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<NetworkZoneDefinitionResponse> _callback) throws ApiException {
            return getNetworkZoneAsync(code, _callback);
        }

        /**
         * Execute getNetworkZone request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Get Network Zone </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<NetworkZoneDefinitionResponse> _callback, ConfigurationOptions opts) throws ApiException {
            return getNetworkZoneAsync(code, _callback, opts);
        }
    }

    /**
     * [BETA] GetNetworkZone: Retrieve a Network Zone
     * Retrieves a Network Zone
     * @param code The unique identifier of the network zone (required)
     * @return APIgetNetworkZoneRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Network Zone </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIgetNetworkZoneRequest getNetworkZone(String code) {
        return new APIgetNetworkZoneRequest(code);
    }
    private okhttp3.Call listNetworkZonesCall(final ApiCallback _callback) throws ApiException {
        return listNetworkZonesCall( _callback, new ConfigurationOptions());
    }

    private okhttp3.Call listNetworkZonesCall(final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/networkzones";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listNetworkZonesValidateBeforeCall(final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        return listNetworkZonesCall(_callback, opts);

    }


    private ApiResponse<List<NetworkZoneDefinitionResponse>> listNetworkZonesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listNetworkZonesValidateBeforeCall(null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<List<NetworkZoneDefinitionResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<List<NetworkZoneDefinitionResponse>> listNetworkZonesWithHttpInfo(ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = listNetworkZonesValidateBeforeCall(null, opts);
        Type localVarReturnType = new TypeToken<List<NetworkZoneDefinitionResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listNetworkZonesAsync(final ApiCallback<List<NetworkZoneDefinitionResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listNetworkZonesValidateBeforeCall(_callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<List<NetworkZoneDefinitionResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call listNetworkZonesAsync(final ApiCallback<List<NetworkZoneDefinitionResponse>> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = listNetworkZonesValidateBeforeCall(_callback, opts);
        Type localVarReturnType = new TypeToken<List<NetworkZoneDefinitionResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistNetworkZonesRequest {

        private APIlistNetworkZonesRequest() {
        }

        /**
         * Build call for listNetworkZones
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List Network Zones </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listNetworkZonesCall(_callback);
        }

        /**
         * Execute listNetworkZones request
         * @return List&lt;NetworkZoneDefinitionResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List Network Zones </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public List<NetworkZoneDefinitionResponse> execute() throws ApiException {
            ApiResponse<List<NetworkZoneDefinitionResponse>> localVarResp = listNetworkZonesWithHttpInfo();
            return localVarResp.getData();
        }

        /**
         * Execute listNetworkZones request. Use any specified configuration options to override any other configuration for this request only.
         * @return List&lt;NetworkZoneDefinitionResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List Network Zones </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public List<NetworkZoneDefinitionResponse> execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<List<NetworkZoneDefinitionResponse>> localVarResp = listNetworkZonesWithHttpInfo(opts);
            return localVarResp.getData();
        }

        /**
         * Execute listNetworkZones request with HTTP info returned
         * @return ApiResponse&lt;List&lt;NetworkZoneDefinitionResponse&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List Network Zones </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<NetworkZoneDefinitionResponse>> executeWithHttpInfo() throws ApiException {
            return listNetworkZonesWithHttpInfo();
        }

        /**
         * Execute listNetworkZones request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;List&lt;NetworkZoneDefinitionResponse&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List Network Zones </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<NetworkZoneDefinitionResponse>> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return listNetworkZonesWithHttpInfo(opts);
        }

        /**
         * Execute listNetworkZones request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List Network Zones </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<NetworkZoneDefinitionResponse>> _callback) throws ApiException {
            return listNetworkZonesAsync(_callback);
        }

        /**
         * Execute listNetworkZones request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List Network Zones </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<NetworkZoneDefinitionResponse>> _callback, ConfigurationOptions opts) throws ApiException {
            return listNetworkZonesAsync(_callback, opts);
        }
    }

    /**
     * [BETA] ListNetworkZones: Lists all network zones for a domain
     * Lists all network zones for a domain
     * @return APIlistNetworkZonesRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Network Zones </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIlistNetworkZonesRequest listNetworkZones() {
        return new APIlistNetworkZonesRequest();
    }
    private okhttp3.Call updateNetworkZoneCall(String code, UpdateNetworkZoneRequest updateNetworkZoneRequest, final ApiCallback _callback) throws ApiException {
        return updateNetworkZoneCall(code, updateNetworkZoneRequest,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call updateNetworkZoneCall(String code, UpdateNetworkZoneRequest updateNetworkZoneRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkZoneRequest;

        // create path and map variables
        String localVarPath = "/api/networkzones/{code}"
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkZoneValidateBeforeCall(String code, UpdateNetworkZoneRequest updateNetworkZoneRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling updateNetworkZone(Async)");
        }

        // verify the required parameter 'updateNetworkZoneRequest' is set
        if (updateNetworkZoneRequest == null) {
            throw new ApiException("Missing the required parameter 'updateNetworkZoneRequest' when calling updateNetworkZone(Async)");
        }

        return updateNetworkZoneCall(code, updateNetworkZoneRequest, _callback, opts);

    }


    private ApiResponse<NetworkZoneDefinitionResponse> updateNetworkZoneWithHttpInfo(String code, UpdateNetworkZoneRequest updateNetworkZoneRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkZoneValidateBeforeCall(code, updateNetworkZoneRequest, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<NetworkZoneDefinitionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<NetworkZoneDefinitionResponse> updateNetworkZoneWithHttpInfo(String code, UpdateNetworkZoneRequest updateNetworkZoneRequest, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkZoneValidateBeforeCall(code, updateNetworkZoneRequest, null, opts);
        Type localVarReturnType = new TypeToken<NetworkZoneDefinitionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateNetworkZoneAsync(String code, UpdateNetworkZoneRequest updateNetworkZoneRequest, final ApiCallback<NetworkZoneDefinitionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkZoneValidateBeforeCall(code, updateNetworkZoneRequest, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<NetworkZoneDefinitionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call updateNetworkZoneAsync(String code, UpdateNetworkZoneRequest updateNetworkZoneRequest, final ApiCallback<NetworkZoneDefinitionResponse> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkZoneValidateBeforeCall(code, updateNetworkZoneRequest, _callback, opts);
        Type localVarReturnType = new TypeToken<NetworkZoneDefinitionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIupdateNetworkZoneRequest {
        private final String code;
        private final UpdateNetworkZoneRequest updateNetworkZoneRequest;

        private APIupdateNetworkZoneRequest(String code, UpdateNetworkZoneRequest updateNetworkZoneRequest) {
            this.code = code;
            this.updateNetworkZoneRequest = updateNetworkZoneRequest;
        }

        /**
         * Build call for updateNetworkZone
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Update Network Zone </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return updateNetworkZoneCall(code, updateNetworkZoneRequest, _callback);
        }

        /**
         * Execute updateNetworkZone request
         * @return NetworkZoneDefinitionResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Update Network Zone </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public NetworkZoneDefinitionResponse execute() throws ApiException {
            ApiResponse<NetworkZoneDefinitionResponse> localVarResp = updateNetworkZoneWithHttpInfo(code, updateNetworkZoneRequest);
            return localVarResp.getData();
        }

        /**
         * Execute updateNetworkZone request. Use any specified configuration options to override any other configuration for this request only.
         * @return NetworkZoneDefinitionResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Update Network Zone </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public NetworkZoneDefinitionResponse execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<NetworkZoneDefinitionResponse> localVarResp = updateNetworkZoneWithHttpInfo(code, updateNetworkZoneRequest, opts);
            return localVarResp.getData();
        }

        /**
         * Execute updateNetworkZone request with HTTP info returned
         * @return ApiResponse&lt;NetworkZoneDefinitionResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Update Network Zone </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<NetworkZoneDefinitionResponse> executeWithHttpInfo() throws ApiException {
            return updateNetworkZoneWithHttpInfo(code, updateNetworkZoneRequest);
        }

        /**
         * Execute updateNetworkZone request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;NetworkZoneDefinitionResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Update Network Zone </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<NetworkZoneDefinitionResponse> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return updateNetworkZoneWithHttpInfo(code, updateNetworkZoneRequest, opts);
        }

        /**
         * Execute updateNetworkZone request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Update Network Zone </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<NetworkZoneDefinitionResponse> _callback) throws ApiException {
            return updateNetworkZoneAsync(code, updateNetworkZoneRequest, _callback);
        }

        /**
         * Execute updateNetworkZone request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Update Network Zone </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<NetworkZoneDefinitionResponse> _callback, ConfigurationOptions opts) throws ApiException {
            return updateNetworkZoneAsync(code, updateNetworkZoneRequest, _callback, opts);
        }
    }

    /**
     * [BETA] UpdateNetworkZone: Updates an existing network zone
     * Updates an existing network zone
     * @param code The unique identifier of the network zone (required)
     * @param updateNetworkZoneRequest The updated definition of the network zone (required)
     * @return APIupdateNetworkZoneRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update Network Zone </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIupdateNetworkZoneRequest updateNetworkZone(String code, UpdateNetworkZoneRequest updateNetworkZoneRequest) {
        return new APIupdateNetworkZoneRequest(code, updateNetworkZoneRequest);
    }
}
