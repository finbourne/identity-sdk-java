/*
 * FINBOURNE Identity Service API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.identity.api;

import com.finbourne.identity.ApiCallback;
import com.finbourne.identity.ApiClient;
import com.finbourne.identity.ApiException;
import com.finbourne.identity.ApiResponse;
import com.finbourne.identity.Configuration;
import com.finbourne.identity.Pair;
import com.finbourne.identity.ProgressRequestBody;
import com.finbourne.identity.ProgressResponseBody;
import com.finbourne.identity.extensions.ConfigurationOptions;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.finbourne.identity.model.LusidProblemDetails;
import com.finbourne.identity.model.LusidValidationProblemDetails;
import java.time.OffsetDateTime;
import com.finbourne.identity.model.ResourceListOfSystemLog;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SystemLogsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SystemLogsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SystemLogsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call listLogsCall(OffsetDateTime since, OffsetDateTime until, String after, String filter, String query, Integer limit, String sortOrder, final ApiCallback _callback) throws ApiException {
        return listLogsCall(since, until, after, filter, query, limit, sortOrder,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call listLogsCall(OffsetDateTime since, OffsetDateTime until, String after, String filter, String query, Integer limit, String sortOrder, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/logs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Since", since));
        }

        if (until != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Until", until));
        }

        if (after != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("After", after));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Filter", filter));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Query", query));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Limit", limit));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SortOrder", sortOrder));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listLogsValidateBeforeCall(OffsetDateTime since, OffsetDateTime until, String after, String filter, String query, Integer limit, String sortOrder, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        return listLogsCall(since, until, after, filter, query, limit, sortOrder, _callback, opts);

    }


    private ApiResponse<ResourceListOfSystemLog> listLogsWithHttpInfo(OffsetDateTime since, OffsetDateTime until, String after, String filter, String query, Integer limit, String sortOrder) throws ApiException {
        okhttp3.Call localVarCall = listLogsValidateBeforeCall(since, until, after, filter, query, limit, sortOrder, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<ResourceListOfSystemLog>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<ResourceListOfSystemLog> listLogsWithHttpInfo(OffsetDateTime since, OffsetDateTime until, String after, String filter, String query, Integer limit, String sortOrder, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = listLogsValidateBeforeCall(since, until, after, filter, query, limit, sortOrder, null, opts);
        Type localVarReturnType = new TypeToken<ResourceListOfSystemLog>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listLogsAsync(OffsetDateTime since, OffsetDateTime until, String after, String filter, String query, Integer limit, String sortOrder, final ApiCallback<ResourceListOfSystemLog> _callback) throws ApiException {

        okhttp3.Call localVarCall = listLogsValidateBeforeCall(since, until, after, filter, query, limit, sortOrder, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<ResourceListOfSystemLog>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call listLogsAsync(OffsetDateTime since, OffsetDateTime until, String after, String filter, String query, Integer limit, String sortOrder, final ApiCallback<ResourceListOfSystemLog> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = listLogsValidateBeforeCall(since, until, after, filter, query, limit, sortOrder, _callback, opts);
        Type localVarReturnType = new TypeToken<ResourceListOfSystemLog>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistLogsRequest {
        private OffsetDateTime since;
        private OffsetDateTime until;
        private String after;
        private String filter;
        private String query;
        private Integer limit;
        private String sortOrder;

        private APIlistLogsRequest() {
        }

        /**
         * Set since
         * @param since Lower bound of log events published property (optional)
         * @return APIlistLogsRequest
         */
        public APIlistLogsRequest since(OffsetDateTime since) {
            this.since = since;
            return this;
        }

        /**
         * Set until
         * @param until Upper bound of log events published property (optional)
         * @return APIlistLogsRequest
         */
        public APIlistLogsRequest until(OffsetDateTime until) {
            this.until = until;
            return this;
        }

        /**
         * Set after
         * @param after Page token (optional)
         * @return APIlistLogsRequest
         */
        public APIlistLogsRequest after(String after) {
            this.after = after;
            return this;
        }

        /**
         * Set filter
         * @param filter Okta filter expression (optional)
         * @return APIlistLogsRequest
         */
        public APIlistLogsRequest filter(String filter) {
            this.filter = filter;
            return this;
        }

        /**
         * Set query
         * @param query Filters log events results by one or more case insensitive keywords (optional)
         * @return APIlistLogsRequest
         */
        public APIlistLogsRequest query(String query) {
            this.query = query;
            return this;
        }

        /**
         * Set limit
         * @param limit Max number of results returned (optional)
         * @return APIlistLogsRequest
         */
        public APIlistLogsRequest limit(Integer limit) {
            this.limit = limit;
            return this;
        }

        /**
         * Set sortOrder
         * @param sortOrder Order of events by published property. Either ASCENDING or DESCENDING (optional)
         * @return APIlistLogsRequest
         */
        public APIlistLogsRequest sortOrder(String sortOrder) {
            this.sortOrder = sortOrder;
            return this;
        }

        /**
         * Build call for listLogs
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List Logs </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listLogsCall(since, until, after, filter, query, limit, sortOrder, _callback);
        }

        /**
         * Execute listLogs request
         * @return ResourceListOfSystemLog
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List Logs </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ResourceListOfSystemLog execute() throws ApiException {
            ApiResponse<ResourceListOfSystemLog> localVarResp = listLogsWithHttpInfo(since, until, after, filter, query, limit, sortOrder);
            return localVarResp.getData();
        }

        /**
         * Execute listLogs request. Use any specified configuration options to override any other configuration for this request only.
         * @return ResourceListOfSystemLog
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List Logs </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ResourceListOfSystemLog execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<ResourceListOfSystemLog> localVarResp = listLogsWithHttpInfo(since, until, after, filter, query, limit, sortOrder, opts);
            return localVarResp.getData();
        }

        /**
         * Execute listLogs request with HTTP info returned
         * @return ApiResponse&lt;ResourceListOfSystemLog&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List Logs </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResourceListOfSystemLog> executeWithHttpInfo() throws ApiException {
            return listLogsWithHttpInfo(since, until, after, filter, query, limit, sortOrder);
        }

        /**
         * Execute listLogs request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;ResourceListOfSystemLog&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List Logs </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResourceListOfSystemLog> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return listLogsWithHttpInfo(since, until, after, filter, query, limit, sortOrder, opts);
        }

        /**
         * Execute listLogs request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List Logs </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResourceListOfSystemLog> _callback) throws ApiException {
            return listLogsAsync(since, until, after, filter, query, limit, sortOrder, _callback);
        }

        /**
         * Execute listLogs request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List Logs </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResourceListOfSystemLog> _callback, ConfigurationOptions opts) throws ApiException {
            return listLogsAsync(since, until, after, filter, query, limit, sortOrder, _callback, opts);
        }
    }

    /**
     * [BETA] ListLogs: Lists system logs for a domain
     * Lists system logs for a domain
     * @return APIlistLogsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Logs </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIlistLogsRequest listLogs() {
        return new APIlistLogsRequest();
    }
}
