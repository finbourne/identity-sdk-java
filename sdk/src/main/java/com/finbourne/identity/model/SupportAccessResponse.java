/*
 * FINBOURNE Identity Service API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.identity.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.identity.JSON;

/**
 * Timestamped successful response to grant access to your account
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class SupportAccessResponse {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private String duration;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_EXPIRY = "expiry";
  @SerializedName(SERIALIZED_NAME_EXPIRY)
  private OffsetDateTime expiry;

  public static final String SERIALIZED_NAME_CREATED_BY = "createdBy";
  @SerializedName(SERIALIZED_NAME_CREATED_BY)
  private String createdBy;

  public static final String SERIALIZED_NAME_TERMINATED = "terminated";
  @SerializedName(SERIALIZED_NAME_TERMINATED)
  private Boolean terminated;

  public static final String SERIALIZED_NAME_TERMINATED_AT = "terminatedAt";
  @SerializedName(SERIALIZED_NAME_TERMINATED_AT)
  private OffsetDateTime terminatedAt;

  public static final String SERIALIZED_NAME_TERMINATED_BY = "terminatedBy";
  @SerializedName(SERIALIZED_NAME_TERMINATED_BY)
  private String terminatedBy;

  public static final String SERIALIZED_NAME_PERMITTED_ROLES = "permittedRoles";
  @SerializedName(SERIALIZED_NAME_PERMITTED_ROLES)
  private List<String> permittedRoles;

  public SupportAccessResponse() {
  }

  public SupportAccessResponse id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * ID of the support access request
   * @return id
  **/
  @jakarta.annotation.Nonnull
  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public SupportAccessResponse duration(String duration) {
    
    this.duration = duration;
    return this;
  }

   /**
   * The duration for which access is requested (in any ISO-8601 format)
   * @return duration
  **/
  @jakarta.annotation.Nonnull
  public String getDuration() {
    return duration;
  }


  public void setDuration(String duration) {
    this.duration = duration;
  }


  public SupportAccessResponse description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * The description of why the support access has been granted (i.e. support ticket numbers)
   * @return description
  **/
  @jakarta.annotation.Nullable
  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public SupportAccessResponse createdAt(OffsetDateTime createdAt) {
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * DateTimeOffset at which the access was granted
   * @return createdAt
  **/
  @jakarta.annotation.Nonnull
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public SupportAccessResponse expiry(OffsetDateTime expiry) {
    
    this.expiry = expiry;
    return this;
  }

   /**
   * DateTimeOffset at which the access will be revoked
   * @return expiry
  **/
  @jakarta.annotation.Nonnull
  public OffsetDateTime getExpiry() {
    return expiry;
  }


  public void setExpiry(OffsetDateTime expiry) {
    this.expiry = expiry;
  }


  public SupportAccessResponse createdBy(String createdBy) {
    
    this.createdBy = createdBy;
    return this;
  }

   /**
   * Obfuscated UserId of the user who granted the support access
   * @return createdBy
  **/
  @jakarta.annotation.Nonnull
  public String getCreatedBy() {
    return createdBy;
  }


  public void setCreatedBy(String createdBy) {
    this.createdBy = createdBy;
  }


  public SupportAccessResponse terminated(Boolean terminated) {
    
    this.terminated = terminated;
    return this;
  }

   /**
   * Whether or not that access has been invalidated
   * @return terminated
  **/
  @jakarta.annotation.Nullable
  public Boolean getTerminated() {
    return terminated;
  }


  public void setTerminated(Boolean terminated) {
    this.terminated = terminated;
  }


  public SupportAccessResponse terminatedAt(OffsetDateTime terminatedAt) {
    
    this.terminatedAt = terminatedAt;
    return this;
  }

   /**
   * DateTimeOffset at which the access was invalidated
   * @return terminatedAt
  **/
  @jakarta.annotation.Nullable
  public OffsetDateTime getTerminatedAt() {
    return terminatedAt;
  }


  public void setTerminatedAt(OffsetDateTime terminatedAt) {
    this.terminatedAt = terminatedAt;
  }


  public SupportAccessResponse terminatedBy(String terminatedBy) {
    
    this.terminatedBy = terminatedBy;
    return this;
  }

   /**
   * Obfuscated UserId of the user who revoked the access
   * @return terminatedBy
  **/
  @jakarta.annotation.Nullable
  public String getTerminatedBy() {
    return terminatedBy;
  }


  public void setTerminatedBy(String terminatedBy) {
    this.terminatedBy = terminatedBy;
  }


  public SupportAccessResponse permittedRoles(List<String> permittedRoles) {
    
    this.permittedRoles = permittedRoles;
    return this;
  }

  public SupportAccessResponse addPermittedRolesItem(String permittedRolesItem) {
    if (this.permittedRoles == null) {
      this.permittedRoles = new ArrayList<>();
    }
    this.permittedRoles.add(permittedRolesItem);
    return this;
  }

   /**
   * A list of permitted roles, valid for support staff to assume, for the duration of the access request
   * @return permittedRoles
  **/
  @jakarta.annotation.Nullable
  public List<String> getPermittedRoles() {
    return permittedRoles;
  }


  public void setPermittedRoles(List<String> permittedRoles) {
    this.permittedRoles = permittedRoles;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SupportAccessResponse supportAccessResponse = (SupportAccessResponse) o;
    return Objects.equals(this.id, supportAccessResponse.id) &&
        Objects.equals(this.duration, supportAccessResponse.duration) &&
        Objects.equals(this.description, supportAccessResponse.description) &&
        Objects.equals(this.createdAt, supportAccessResponse.createdAt) &&
        Objects.equals(this.expiry, supportAccessResponse.expiry) &&
        Objects.equals(this.createdBy, supportAccessResponse.createdBy) &&
        Objects.equals(this.terminated, supportAccessResponse.terminated) &&
        Objects.equals(this.terminatedAt, supportAccessResponse.terminatedAt) &&
        Objects.equals(this.terminatedBy, supportAccessResponse.terminatedBy) &&
        Objects.equals(this.permittedRoles, supportAccessResponse.permittedRoles);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, duration, description, createdAt, expiry, createdBy, terminated, terminatedAt, terminatedBy, permittedRoles);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SupportAccessResponse {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    expiry: ").append(toIndentedString(expiry)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    terminated: ").append(toIndentedString(terminated)).append("\n");
    sb.append("    terminatedAt: ").append(toIndentedString(terminatedAt)).append("\n");
    sb.append("    terminatedBy: ").append(toIndentedString(terminatedBy)).append("\n");
    sb.append("    permittedRoles: ").append(toIndentedString(permittedRoles)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("duration");
    openapiFields.add("description");
    openapiFields.add("createdAt");
    openapiFields.add("expiry");
    openapiFields.add("createdBy");
    openapiFields.add("terminated");
    openapiFields.add("terminatedAt");
    openapiFields.add("terminatedBy");
    openapiFields.add("permittedRoles");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("duration");
    openapiRequiredFields.add("createdAt");
    openapiRequiredFields.add("expiry");
    openapiRequiredFields.add("createdBy");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to SupportAccessResponse
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SupportAccessResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SupportAccessResponse is not found in the empty JSON string", SupportAccessResponse.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SupportAccessResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("duration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `duration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("duration").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("createdBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createdBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createdBy").toString()));
      }
      if ((jsonObj.get("terminatedBy") != null && !jsonObj.get("terminatedBy").isJsonNull()) && !jsonObj.get("terminatedBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `terminatedBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("terminatedBy").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("permittedRoles") != null && !jsonObj.get("permittedRoles").isJsonNull() && !jsonObj.get("permittedRoles").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `permittedRoles` to be an array in the JSON string but got `%s`", jsonObj.get("permittedRoles").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SupportAccessResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SupportAccessResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SupportAccessResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SupportAccessResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<SupportAccessResponse>() {
           @Override
           public void write(JsonWriter out, SupportAccessResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SupportAccessResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SupportAccessResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SupportAccessResponse
  * @throws IOException if the JSON string is invalid with respect to SupportAccessResponse
  */
  public static SupportAccessResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SupportAccessResponse.class);
  }

 /**
  * Convert an instance of SupportAccessResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
