/*
 * FINBOURNE Identity Service API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.identity.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.identity.JSON;

/**
 * UpdatePasswordPolicyRequestAge
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class UpdatePasswordPolicyRequestAge {
  public static final String SERIALIZED_NAME_MAX_AGE_DAYS = "maxAgeDays";
  @SerializedName(SERIALIZED_NAME_MAX_AGE_DAYS)
  private Integer maxAgeDays;

  public static final String SERIALIZED_NAME_HISTORY_COUNT = "historyCount";
  @SerializedName(SERIALIZED_NAME_HISTORY_COUNT)
  private Integer historyCount;

  public UpdatePasswordPolicyRequestAge() {
  }

  public UpdatePasswordPolicyRequestAge maxAgeDays(Integer maxAgeDays) {
    
    this.maxAgeDays = maxAgeDays;
    return this;
  }

   /**
   * The maximum age (in days) a password can be before expiring and needing to be changed
   * @return maxAgeDays
  **/
  @jakarta.annotation.Nonnull
  public Integer getMaxAgeDays() {
    return maxAgeDays;
  }


  public void setMaxAgeDays(Integer maxAgeDays) {
    this.maxAgeDays = maxAgeDays;
  }


  public UpdatePasswordPolicyRequestAge historyCount(Integer historyCount) {
    
    this.historyCount = historyCount;
    return this;
  }

   /**
   * The number of unique passwords that need to be used before a previous password is permitted again
   * @return historyCount
  **/
  @jakarta.annotation.Nonnull
  public Integer getHistoryCount() {
    return historyCount;
  }


  public void setHistoryCount(Integer historyCount) {
    this.historyCount = historyCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdatePasswordPolicyRequestAge updatePasswordPolicyRequestAge = (UpdatePasswordPolicyRequestAge) o;
    return Objects.equals(this.maxAgeDays, updatePasswordPolicyRequestAge.maxAgeDays) &&
        Objects.equals(this.historyCount, updatePasswordPolicyRequestAge.historyCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(maxAgeDays, historyCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdatePasswordPolicyRequestAge {\n");
    sb.append("    maxAgeDays: ").append(toIndentedString(maxAgeDays)).append("\n");
    sb.append("    historyCount: ").append(toIndentedString(historyCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("maxAgeDays");
    openapiFields.add("historyCount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("maxAgeDays");
    openapiRequiredFields.add("historyCount");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to UpdatePasswordPolicyRequestAge
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdatePasswordPolicyRequestAge.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdatePasswordPolicyRequestAge is not found in the empty JSON string", UpdatePasswordPolicyRequestAge.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdatePasswordPolicyRequestAge.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdatePasswordPolicyRequestAge.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdatePasswordPolicyRequestAge' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdatePasswordPolicyRequestAge> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdatePasswordPolicyRequestAge.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdatePasswordPolicyRequestAge>() {
           @Override
           public void write(JsonWriter out, UpdatePasswordPolicyRequestAge value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdatePasswordPolicyRequestAge read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of UpdatePasswordPolicyRequestAge given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of UpdatePasswordPolicyRequestAge
  * @throws IOException if the JSON string is invalid with respect to UpdatePasswordPolicyRequestAge
  */
  public static UpdatePasswordPolicyRequestAge fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdatePasswordPolicyRequestAge.class);
  }

 /**
  * Convert an instance of UpdatePasswordPolicyRequestAge to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
