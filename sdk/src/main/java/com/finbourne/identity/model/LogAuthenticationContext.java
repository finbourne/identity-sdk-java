/*
 * FINBOURNE Identity Service API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.identity.model;

import java.util.Objects;
import com.finbourne.identity.model.LogAuthenticationProvider;
import com.finbourne.identity.model.LogCredentialProvider;
import com.finbourne.identity.model.LogCredentialType;
import com.finbourne.identity.model.LogIssuer;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.identity.JSON;

/**
 * Represents a LogAuthenticationContext resource in the Okta API
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class LogAuthenticationContext {
  public static final String SERIALIZED_NAME_AUTHENTICATION_PROVIDER = "authenticationProvider";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATION_PROVIDER)
  private LogAuthenticationProvider authenticationProvider;

  public static final String SERIALIZED_NAME_CREDENTIAL_PROVIDER = "credentialProvider";
  @SerializedName(SERIALIZED_NAME_CREDENTIAL_PROVIDER)
  private List<LogCredentialProvider> credentialProvider;

  public static final String SERIALIZED_NAME_CREDENTIAL_TYPE = "credentialType";
  @SerializedName(SERIALIZED_NAME_CREDENTIAL_TYPE)
  private List<LogCredentialType> credentialType;

  public static final String SERIALIZED_NAME_ISSUER = "issuer";
  @SerializedName(SERIALIZED_NAME_ISSUER)
  private LogIssuer issuer;

  public static final String SERIALIZED_NAME_INTERFACE = "interface";
  @SerializedName(SERIALIZED_NAME_INTERFACE)
  private String _interface;

  public static final String SERIALIZED_NAME_AUTHENTICATION_STEP = "authenticationStep";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATION_STEP)
  private Integer authenticationStep;

  public static final String SERIALIZED_NAME_EXTERNAL_SESSION_ID = "externalSessionId";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_SESSION_ID)
  private String externalSessionId;

  public LogAuthenticationContext() {
  }

  public LogAuthenticationContext authenticationProvider(LogAuthenticationProvider authenticationProvider) {
    
    this.authenticationProvider = authenticationProvider;
    return this;
  }

   /**
   * Get authenticationProvider
   * @return authenticationProvider
  **/
  @jakarta.annotation.Nullable
  public LogAuthenticationProvider getAuthenticationProvider() {
    return authenticationProvider;
  }


  public void setAuthenticationProvider(LogAuthenticationProvider authenticationProvider) {
    this.authenticationProvider = authenticationProvider;
  }


  public LogAuthenticationContext credentialProvider(List<LogCredentialProvider> credentialProvider) {
    
    this.credentialProvider = credentialProvider;
    return this;
  }

  public LogAuthenticationContext addCredentialProviderItem(LogCredentialProvider credentialProviderItem) {
    if (this.credentialProvider == null) {
      this.credentialProvider = new ArrayList<>();
    }
    this.credentialProvider.add(credentialProviderItem);
    return this;
  }

   /**
   * Get credentialProvider
   * @return credentialProvider
  **/
  @jakarta.annotation.Nullable
  public List<LogCredentialProvider> getCredentialProvider() {
    return credentialProvider;
  }


  public void setCredentialProvider(List<LogCredentialProvider> credentialProvider) {
    this.credentialProvider = credentialProvider;
  }


  public LogAuthenticationContext credentialType(List<LogCredentialType> credentialType) {
    
    this.credentialType = credentialType;
    return this;
  }

  public LogAuthenticationContext addCredentialTypeItem(LogCredentialType credentialTypeItem) {
    if (this.credentialType == null) {
      this.credentialType = new ArrayList<>();
    }
    this.credentialType.add(credentialTypeItem);
    return this;
  }

   /**
   * Get credentialType
   * @return credentialType
  **/
  @jakarta.annotation.Nullable
  public List<LogCredentialType> getCredentialType() {
    return credentialType;
  }


  public void setCredentialType(List<LogCredentialType> credentialType) {
    this.credentialType = credentialType;
  }


  public LogAuthenticationContext issuer(LogIssuer issuer) {
    
    this.issuer = issuer;
    return this;
  }

   /**
   * Get issuer
   * @return issuer
  **/
  @jakarta.annotation.Nullable
  public LogIssuer getIssuer() {
    return issuer;
  }


  public void setIssuer(LogIssuer issuer) {
    this.issuer = issuer;
  }


  public LogAuthenticationContext _interface(String _interface) {
    
    this._interface = _interface;
    return this;
  }

   /**
   * Get _interface
   * @return _interface
  **/
  @jakarta.annotation.Nullable
  public String getInterface() {
    return _interface;
  }


  public void setInterface(String _interface) {
    this._interface = _interface;
  }


  public LogAuthenticationContext authenticationStep(Integer authenticationStep) {
    
    this.authenticationStep = authenticationStep;
    return this;
  }

   /**
   * Get authenticationStep
   * @return authenticationStep
  **/
  @jakarta.annotation.Nullable
  public Integer getAuthenticationStep() {
    return authenticationStep;
  }


  public void setAuthenticationStep(Integer authenticationStep) {
    this.authenticationStep = authenticationStep;
  }


  public LogAuthenticationContext externalSessionId(String externalSessionId) {
    
    this.externalSessionId = externalSessionId;
    return this;
  }

   /**
   * Get externalSessionId
   * @return externalSessionId
  **/
  @jakarta.annotation.Nullable
  public String getExternalSessionId() {
    return externalSessionId;
  }


  public void setExternalSessionId(String externalSessionId) {
    this.externalSessionId = externalSessionId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LogAuthenticationContext logAuthenticationContext = (LogAuthenticationContext) o;
    return Objects.equals(this.authenticationProvider, logAuthenticationContext.authenticationProvider) &&
        Objects.equals(this.credentialProvider, logAuthenticationContext.credentialProvider) &&
        Objects.equals(this.credentialType, logAuthenticationContext.credentialType) &&
        Objects.equals(this.issuer, logAuthenticationContext.issuer) &&
        Objects.equals(this._interface, logAuthenticationContext._interface) &&
        Objects.equals(this.authenticationStep, logAuthenticationContext.authenticationStep) &&
        Objects.equals(this.externalSessionId, logAuthenticationContext.externalSessionId);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(authenticationProvider, credentialProvider, credentialType, issuer, _interface, authenticationStep, externalSessionId);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LogAuthenticationContext {\n");
    sb.append("    authenticationProvider: ").append(toIndentedString(authenticationProvider)).append("\n");
    sb.append("    credentialProvider: ").append(toIndentedString(credentialProvider)).append("\n");
    sb.append("    credentialType: ").append(toIndentedString(credentialType)).append("\n");
    sb.append("    issuer: ").append(toIndentedString(issuer)).append("\n");
    sb.append("    _interface: ").append(toIndentedString(_interface)).append("\n");
    sb.append("    authenticationStep: ").append(toIndentedString(authenticationStep)).append("\n");
    sb.append("    externalSessionId: ").append(toIndentedString(externalSessionId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("authenticationProvider");
    openapiFields.add("credentialProvider");
    openapiFields.add("credentialType");
    openapiFields.add("issuer");
    openapiFields.add("interface");
    openapiFields.add("authenticationStep");
    openapiFields.add("externalSessionId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to LogAuthenticationContext
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LogAuthenticationContext.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LogAuthenticationContext is not found in the empty JSON string", LogAuthenticationContext.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `authenticationProvider`
      if (jsonObj.get("authenticationProvider") != null && !jsonObj.get("authenticationProvider").isJsonNull()) {
        LogAuthenticationProvider.validateJsonElement(jsonObj.get("authenticationProvider"));
      }
      if (jsonObj.get("credentialProvider") != null && !jsonObj.get("credentialProvider").isJsonNull()) {
        JsonArray jsonArraycredentialProvider = jsonObj.getAsJsonArray("credentialProvider");
        if (jsonArraycredentialProvider != null) {
          // ensure the json data is an array
          if (!jsonObj.get("credentialProvider").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `credentialProvider` to be an array in the JSON string but got `%s`", jsonObj.get("credentialProvider").toString()));
          }

          // validate the optional field `credentialProvider` (array)
          for (int i = 0; i < jsonArraycredentialProvider.size(); i++) {
            LogCredentialProvider.validateJsonElement(jsonArraycredentialProvider.get(i));
          };
        }
      }
      if (jsonObj.get("credentialType") != null && !jsonObj.get("credentialType").isJsonNull()) {
        JsonArray jsonArraycredentialType = jsonObj.getAsJsonArray("credentialType");
        if (jsonArraycredentialType != null) {
          // ensure the json data is an array
          if (!jsonObj.get("credentialType").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `credentialType` to be an array in the JSON string but got `%s`", jsonObj.get("credentialType").toString()));
          }

          // validate the optional field `credentialType` (array)
          for (int i = 0; i < jsonArraycredentialType.size(); i++) {
            LogCredentialType.validateJsonElement(jsonArraycredentialType.get(i));
          };
        }
      }
      // validate the optional field `issuer`
      if (jsonObj.get("issuer") != null && !jsonObj.get("issuer").isJsonNull()) {
        LogIssuer.validateJsonElement(jsonObj.get("issuer"));
      }
      if ((jsonObj.get("interface") != null && !jsonObj.get("interface").isJsonNull()) && !jsonObj.get("interface").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `interface` to be a primitive type in the JSON string but got `%s`", jsonObj.get("interface").toString()));
      }
      if ((jsonObj.get("externalSessionId") != null && !jsonObj.get("externalSessionId").isJsonNull()) && !jsonObj.get("externalSessionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `externalSessionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("externalSessionId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LogAuthenticationContext.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LogAuthenticationContext' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LogAuthenticationContext> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LogAuthenticationContext.class));

       return (TypeAdapter<T>) new TypeAdapter<LogAuthenticationContext>() {
           @Override
           public void write(JsonWriter out, LogAuthenticationContext value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LogAuthenticationContext read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of LogAuthenticationContext given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of LogAuthenticationContext
  * @throws IOException if the JSON string is invalid with respect to LogAuthenticationContext
  */
  public static LogAuthenticationContext fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LogAuthenticationContext.class);
  }

 /**
  * Convert an instance of LogAuthenticationContext to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
