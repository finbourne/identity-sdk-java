/*
 * FINBOURNE Identity Service API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.identity.model;

import java.util.Objects;
import com.finbourne.identity.model.PasswordPolicyAge;
import com.finbourne.identity.model.PasswordPolicyComplexity;
import com.finbourne.identity.model.PasswordPolicyLockout;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.identity.JSON;

/**
 * Password policy conditions for a password policy
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class PasswordPolicyConditions {
  public static final String SERIALIZED_NAME_COMPLEXITY = "complexity";
  @SerializedName(SERIALIZED_NAME_COMPLEXITY)
  private PasswordPolicyComplexity complexity;

  public static final String SERIALIZED_NAME_AGE = "age";
  @SerializedName(SERIALIZED_NAME_AGE)
  private PasswordPolicyAge age;

  public static final String SERIALIZED_NAME_LOCKOUT = "lockout";
  @SerializedName(SERIALIZED_NAME_LOCKOUT)
  private PasswordPolicyLockout lockout;

  public PasswordPolicyConditions() {
  }

  public PasswordPolicyConditions complexity(PasswordPolicyComplexity complexity) {
    
    this.complexity = complexity;
    return this;
  }

   /**
   * Get complexity
   * @return complexity
  **/
  @jakarta.annotation.Nullable
  public PasswordPolicyComplexity getComplexity() {
    return complexity;
  }


  public void setComplexity(PasswordPolicyComplexity complexity) {
    this.complexity = complexity;
  }


  public PasswordPolicyConditions age(PasswordPolicyAge age) {
    
    this.age = age;
    return this;
  }

   /**
   * Get age
   * @return age
  **/
  @jakarta.annotation.Nullable
  public PasswordPolicyAge getAge() {
    return age;
  }


  public void setAge(PasswordPolicyAge age) {
    this.age = age;
  }


  public PasswordPolicyConditions lockout(PasswordPolicyLockout lockout) {
    
    this.lockout = lockout;
    return this;
  }

   /**
   * Get lockout
   * @return lockout
  **/
  @jakarta.annotation.Nullable
  public PasswordPolicyLockout getLockout() {
    return lockout;
  }


  public void setLockout(PasswordPolicyLockout lockout) {
    this.lockout = lockout;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PasswordPolicyConditions passwordPolicyConditions = (PasswordPolicyConditions) o;
    return Objects.equals(this.complexity, passwordPolicyConditions.complexity) &&
        Objects.equals(this.age, passwordPolicyConditions.age) &&
        Objects.equals(this.lockout, passwordPolicyConditions.lockout);
  }

  @Override
  public int hashCode() {
    return Objects.hash(complexity, age, lockout);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PasswordPolicyConditions {\n");
    sb.append("    complexity: ").append(toIndentedString(complexity)).append("\n");
    sb.append("    age: ").append(toIndentedString(age)).append("\n");
    sb.append("    lockout: ").append(toIndentedString(lockout)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("complexity");
    openapiFields.add("age");
    openapiFields.add("lockout");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to PasswordPolicyConditions
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PasswordPolicyConditions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PasswordPolicyConditions is not found in the empty JSON string", PasswordPolicyConditions.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `complexity`
      if (jsonObj.get("complexity") != null && !jsonObj.get("complexity").isJsonNull()) {
        PasswordPolicyComplexity.validateJsonElement(jsonObj.get("complexity"));
      }
      // validate the optional field `age`
      if (jsonObj.get("age") != null && !jsonObj.get("age").isJsonNull()) {
        PasswordPolicyAge.validateJsonElement(jsonObj.get("age"));
      }
      // validate the optional field `lockout`
      if (jsonObj.get("lockout") != null && !jsonObj.get("lockout").isJsonNull()) {
        PasswordPolicyLockout.validateJsonElement(jsonObj.get("lockout"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PasswordPolicyConditions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PasswordPolicyConditions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PasswordPolicyConditions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PasswordPolicyConditions.class));

       return (TypeAdapter<T>) new TypeAdapter<PasswordPolicyConditions>() {
           @Override
           public void write(JsonWriter out, PasswordPolicyConditions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PasswordPolicyConditions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PasswordPolicyConditions given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PasswordPolicyConditions
  * @throws IOException if the JSON string is invalid with respect to PasswordPolicyConditions
  */
  public static PasswordPolicyConditions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PasswordPolicyConditions.class);
  }

 /**
  * Convert an instance of PasswordPolicyConditions to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
