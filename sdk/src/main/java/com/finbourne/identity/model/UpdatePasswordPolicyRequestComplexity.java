/*
 * FINBOURNE Identity Service API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.identity.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.identity.JSON;

/**
 * UpdatePasswordPolicyRequestComplexity
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class UpdatePasswordPolicyRequestComplexity {
  public static final String SERIALIZED_NAME_MIN_LENGTH = "minLength";
  @SerializedName(SERIALIZED_NAME_MIN_LENGTH)
  private Integer minLength;

  public static final String SERIALIZED_NAME_EXCLUDE_FIRST_NAME = "excludeFirstName";
  @SerializedName(SERIALIZED_NAME_EXCLUDE_FIRST_NAME)
  private Boolean excludeFirstName;

  public static final String SERIALIZED_NAME_EXCLUDE_LAST_NAME = "excludeLastName";
  @SerializedName(SERIALIZED_NAME_EXCLUDE_LAST_NAME)
  private Boolean excludeLastName;

  public UpdatePasswordPolicyRequestComplexity() {
  }

  public UpdatePasswordPolicyRequestComplexity minLength(Integer minLength) {
    
    this.minLength = minLength;
    return this;
  }

   /**
   * The minimum length for a password
   * minimum: 12
   * maximum: 30
   * @return minLength
  **/
  @jakarta.annotation.Nonnull
  public Integer getMinLength() {
    return minLength;
  }


  public void setMinLength(Integer minLength) {
    this.minLength = minLength;
  }


  public UpdatePasswordPolicyRequestComplexity excludeFirstName(Boolean excludeFirstName) {
    
    this.excludeFirstName = excludeFirstName;
    return this;
  }

   /**
   * Rule determining whether a user&#39;s first name should be permitted in their password
   * @return excludeFirstName
  **/
  @jakarta.annotation.Nonnull
  public Boolean getExcludeFirstName() {
    return excludeFirstName;
  }


  public void setExcludeFirstName(Boolean excludeFirstName) {
    this.excludeFirstName = excludeFirstName;
  }


  public UpdatePasswordPolicyRequestComplexity excludeLastName(Boolean excludeLastName) {
    
    this.excludeLastName = excludeLastName;
    return this;
  }

   /**
   * Rule determining whether a user&#39;s last name should be permitted in their password
   * @return excludeLastName
  **/
  @jakarta.annotation.Nonnull
  public Boolean getExcludeLastName() {
    return excludeLastName;
  }


  public void setExcludeLastName(Boolean excludeLastName) {
    this.excludeLastName = excludeLastName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdatePasswordPolicyRequestComplexity updatePasswordPolicyRequestComplexity = (UpdatePasswordPolicyRequestComplexity) o;
    return Objects.equals(this.minLength, updatePasswordPolicyRequestComplexity.minLength) &&
        Objects.equals(this.excludeFirstName, updatePasswordPolicyRequestComplexity.excludeFirstName) &&
        Objects.equals(this.excludeLastName, updatePasswordPolicyRequestComplexity.excludeLastName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(minLength, excludeFirstName, excludeLastName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdatePasswordPolicyRequestComplexity {\n");
    sb.append("    minLength: ").append(toIndentedString(minLength)).append("\n");
    sb.append("    excludeFirstName: ").append(toIndentedString(excludeFirstName)).append("\n");
    sb.append("    excludeLastName: ").append(toIndentedString(excludeLastName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("minLength");
    openapiFields.add("excludeFirstName");
    openapiFields.add("excludeLastName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("minLength");
    openapiRequiredFields.add("excludeFirstName");
    openapiRequiredFields.add("excludeLastName");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to UpdatePasswordPolicyRequestComplexity
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdatePasswordPolicyRequestComplexity.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdatePasswordPolicyRequestComplexity is not found in the empty JSON string", UpdatePasswordPolicyRequestComplexity.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdatePasswordPolicyRequestComplexity.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdatePasswordPolicyRequestComplexity.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdatePasswordPolicyRequestComplexity' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdatePasswordPolicyRequestComplexity> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdatePasswordPolicyRequestComplexity.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdatePasswordPolicyRequestComplexity>() {
           @Override
           public void write(JsonWriter out, UpdatePasswordPolicyRequestComplexity value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdatePasswordPolicyRequestComplexity read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of UpdatePasswordPolicyRequestComplexity given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of UpdatePasswordPolicyRequestComplexity
  * @throws IOException if the JSON string is invalid with respect to UpdatePasswordPolicyRequestComplexity
  */
  public static UpdatePasswordPolicyRequestComplexity fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdatePasswordPolicyRequestComplexity.class);
  }

 /**
  * Convert an instance of UpdatePasswordPolicyRequestComplexity to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
