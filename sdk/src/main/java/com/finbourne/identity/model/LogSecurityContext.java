/*
 * FINBOURNE Identity Service API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.identity.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.identity.JSON;

/**
 * Represents a LogSecurityContext resource in the Okta API
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class LogSecurityContext {
  public static final String SERIALIZED_NAME_AS_NUMBER = "asNumber";
  @SerializedName(SERIALIZED_NAME_AS_NUMBER)
  private Integer asNumber;

  public static final String SERIALIZED_NAME_AS_ORG = "asOrg";
  @SerializedName(SERIALIZED_NAME_AS_ORG)
  private String asOrg;

  public static final String SERIALIZED_NAME_ISP = "isp";
  @SerializedName(SERIALIZED_NAME_ISP)
  private String isp;

  public static final String SERIALIZED_NAME_DOMAIN = "domain";
  @SerializedName(SERIALIZED_NAME_DOMAIN)
  private String domain;

  public static final String SERIALIZED_NAME_IS_PROXY = "isProxy";
  @SerializedName(SERIALIZED_NAME_IS_PROXY)
  private Boolean isProxy;

  public LogSecurityContext() {
  }

  public LogSecurityContext asNumber(Integer asNumber) {
    
    this.asNumber = asNumber;
    return this;
  }

   /**
   * Get asNumber
   * @return asNumber
  **/
  @jakarta.annotation.Nullable
  public Integer getAsNumber() {
    return asNumber;
  }


  public void setAsNumber(Integer asNumber) {
    this.asNumber = asNumber;
  }


  public LogSecurityContext asOrg(String asOrg) {
    
    this.asOrg = asOrg;
    return this;
  }

   /**
   * Get asOrg
   * @return asOrg
  **/
  @jakarta.annotation.Nullable
  public String getAsOrg() {
    return asOrg;
  }


  public void setAsOrg(String asOrg) {
    this.asOrg = asOrg;
  }


  public LogSecurityContext isp(String isp) {
    
    this.isp = isp;
    return this;
  }

   /**
   * Get isp
   * @return isp
  **/
  @jakarta.annotation.Nullable
  public String getIsp() {
    return isp;
  }


  public void setIsp(String isp) {
    this.isp = isp;
  }


  public LogSecurityContext domain(String domain) {
    
    this.domain = domain;
    return this;
  }

   /**
   * Get domain
   * @return domain
  **/
  @jakarta.annotation.Nullable
  public String getDomain() {
    return domain;
  }


  public void setDomain(String domain) {
    this.domain = domain;
  }


  public LogSecurityContext isProxy(Boolean isProxy) {
    
    this.isProxy = isProxy;
    return this;
  }

   /**
   * Get isProxy
   * @return isProxy
  **/
  @jakarta.annotation.Nullable
  public Boolean getIsProxy() {
    return isProxy;
  }


  public void setIsProxy(Boolean isProxy) {
    this.isProxy = isProxy;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LogSecurityContext logSecurityContext = (LogSecurityContext) o;
    return Objects.equals(this.asNumber, logSecurityContext.asNumber) &&
        Objects.equals(this.asOrg, logSecurityContext.asOrg) &&
        Objects.equals(this.isp, logSecurityContext.isp) &&
        Objects.equals(this.domain, logSecurityContext.domain) &&
        Objects.equals(this.isProxy, logSecurityContext.isProxy);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(asNumber, asOrg, isp, domain, isProxy);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LogSecurityContext {\n");
    sb.append("    asNumber: ").append(toIndentedString(asNumber)).append("\n");
    sb.append("    asOrg: ").append(toIndentedString(asOrg)).append("\n");
    sb.append("    isp: ").append(toIndentedString(isp)).append("\n");
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    isProxy: ").append(toIndentedString(isProxy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("asNumber");
    openapiFields.add("asOrg");
    openapiFields.add("isp");
    openapiFields.add("domain");
    openapiFields.add("isProxy");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to LogSecurityContext
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LogSecurityContext.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LogSecurityContext is not found in the empty JSON string", LogSecurityContext.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("asOrg") != null && !jsonObj.get("asOrg").isJsonNull()) && !jsonObj.get("asOrg").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `asOrg` to be a primitive type in the JSON string but got `%s`", jsonObj.get("asOrg").toString()));
      }
      if ((jsonObj.get("isp") != null && !jsonObj.get("isp").isJsonNull()) && !jsonObj.get("isp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `isp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("isp").toString()));
      }
      if ((jsonObj.get("domain") != null && !jsonObj.get("domain").isJsonNull()) && !jsonObj.get("domain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domain").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LogSecurityContext.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LogSecurityContext' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LogSecurityContext> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LogSecurityContext.class));

       return (TypeAdapter<T>) new TypeAdapter<LogSecurityContext>() {
           @Override
           public void write(JsonWriter out, LogSecurityContext value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LogSecurityContext read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of LogSecurityContext given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of LogSecurityContext
  * @throws IOException if the JSON string is invalid with respect to LogSecurityContext
  */
  public static LogSecurityContext fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LogSecurityContext.class);
  }

 /**
  * Convert an instance of LogSecurityContext to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
