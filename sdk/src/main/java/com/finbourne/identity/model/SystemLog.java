/*
 * FINBOURNE Identity Service API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.identity.model;

import java.util.Objects;
import com.finbourne.identity.model.LogActor;
import com.finbourne.identity.model.LogAuthenticationContext;
import com.finbourne.identity.model.LogClientInfo;
import com.finbourne.identity.model.LogDebugContext;
import com.finbourne.identity.model.LogOutcome;
import com.finbourne.identity.model.LogRequest;
import com.finbourne.identity.model.LogSecurityContext;
import com.finbourne.identity.model.LogSeverity;
import com.finbourne.identity.model.LogTarget;
import com.finbourne.identity.model.LogTransaction;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.identity.JSON;

/**
 * A system log event
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class SystemLog {
  public static final String SERIALIZED_NAME_ACTOR = "actor";
  @SerializedName(SERIALIZED_NAME_ACTOR)
  private LogActor actor;

  public static final String SERIALIZED_NAME_AUTHENTICATION_CONTEXT = "authenticationContext";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATION_CONTEXT)
  private LogAuthenticationContext authenticationContext;

  public static final String SERIALIZED_NAME_CLIENT_INFO = "clientInfo";
  @SerializedName(SERIALIZED_NAME_CLIENT_INFO)
  private LogClientInfo clientInfo;

  public static final String SERIALIZED_NAME_DEBUG_CONTEXT = "debugContext";
  @SerializedName(SERIALIZED_NAME_DEBUG_CONTEXT)
  private LogDebugContext debugContext;

  public static final String SERIALIZED_NAME_DISPLAY_MESSAGE = "displayMessage";
  @SerializedName(SERIALIZED_NAME_DISPLAY_MESSAGE)
  private String displayMessage;

  public static final String SERIALIZED_NAME_EVENT_TYPE = "eventType";
  @SerializedName(SERIALIZED_NAME_EVENT_TYPE)
  private String eventType;

  public static final String SERIALIZED_NAME_LEGACY_EVENT_TYPE = "legacyEventType";
  @SerializedName(SERIALIZED_NAME_LEGACY_EVENT_TYPE)
  private String legacyEventType;

  public static final String SERIALIZED_NAME_OUTCOME = "outcome";
  @SerializedName(SERIALIZED_NAME_OUTCOME)
  private LogOutcome outcome;

  public static final String SERIALIZED_NAME_PUBLISHED = "published";
  @SerializedName(SERIALIZED_NAME_PUBLISHED)
  private OffsetDateTime published;

  public static final String SERIALIZED_NAME_REQUEST = "request";
  @SerializedName(SERIALIZED_NAME_REQUEST)
  private LogRequest request;

  public static final String SERIALIZED_NAME_SECURITY_CONTEXT = "securityContext";
  @SerializedName(SERIALIZED_NAME_SECURITY_CONTEXT)
  private LogSecurityContext securityContext;

  public static final String SERIALIZED_NAME_SEVERITY = "severity";
  @SerializedName(SERIALIZED_NAME_SEVERITY)
  private LogSeverity severity;

  public static final String SERIALIZED_NAME_TARGET = "target";
  @SerializedName(SERIALIZED_NAME_TARGET)
  private List<LogTarget> target;

  public static final String SERIALIZED_NAME_TRANSACTION = "transaction";
  @SerializedName(SERIALIZED_NAME_TRANSACTION)
  private LogTransaction transaction;

  public static final String SERIALIZED_NAME_UUID = "uuid";
  @SerializedName(SERIALIZED_NAME_UUID)
  private String uuid;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public SystemLog() {
  }

  public SystemLog actor(LogActor actor) {
    
    this.actor = actor;
    return this;
  }

   /**
   * Get actor
   * @return actor
  **/
  @jakarta.annotation.Nullable
  public LogActor getActor() {
    return actor;
  }


  public void setActor(LogActor actor) {
    this.actor = actor;
  }


  public SystemLog authenticationContext(LogAuthenticationContext authenticationContext) {
    
    this.authenticationContext = authenticationContext;
    return this;
  }

   /**
   * Get authenticationContext
   * @return authenticationContext
  **/
  @jakarta.annotation.Nullable
  public LogAuthenticationContext getAuthenticationContext() {
    return authenticationContext;
  }


  public void setAuthenticationContext(LogAuthenticationContext authenticationContext) {
    this.authenticationContext = authenticationContext;
  }


  public SystemLog clientInfo(LogClientInfo clientInfo) {
    
    this.clientInfo = clientInfo;
    return this;
  }

   /**
   * Get clientInfo
   * @return clientInfo
  **/
  @jakarta.annotation.Nullable
  public LogClientInfo getClientInfo() {
    return clientInfo;
  }


  public void setClientInfo(LogClientInfo clientInfo) {
    this.clientInfo = clientInfo;
  }


  public SystemLog debugContext(LogDebugContext debugContext) {
    
    this.debugContext = debugContext;
    return this;
  }

   /**
   * Get debugContext
   * @return debugContext
  **/
  @jakarta.annotation.Nullable
  public LogDebugContext getDebugContext() {
    return debugContext;
  }


  public void setDebugContext(LogDebugContext debugContext) {
    this.debugContext = debugContext;
  }


  public SystemLog displayMessage(String displayMessage) {
    
    this.displayMessage = displayMessage;
    return this;
  }

   /**
   * Represents a DisplayMessage resource in the Okta API
   * @return displayMessage
  **/
  @jakarta.annotation.Nullable
  public String getDisplayMessage() {
    return displayMessage;
  }


  public void setDisplayMessage(String displayMessage) {
    this.displayMessage = displayMessage;
  }


  public SystemLog eventType(String eventType) {
    
    this.eventType = eventType;
    return this;
  }

   /**
   * Represents a EventType resource in the Okta API
   * @return eventType
  **/
  @jakarta.annotation.Nullable
  public String getEventType() {
    return eventType;
  }


  public void setEventType(String eventType) {
    this.eventType = eventType;
  }


  public SystemLog legacyEventType(String legacyEventType) {
    
    this.legacyEventType = legacyEventType;
    return this;
  }

   /**
   * Represents a LegacyEventType resource in the Okta API
   * @return legacyEventType
  **/
  @jakarta.annotation.Nullable
  public String getLegacyEventType() {
    return legacyEventType;
  }


  public void setLegacyEventType(String legacyEventType) {
    this.legacyEventType = legacyEventType;
  }


  public SystemLog outcome(LogOutcome outcome) {
    
    this.outcome = outcome;
    return this;
  }

   /**
   * Get outcome
   * @return outcome
  **/
  @jakarta.annotation.Nullable
  public LogOutcome getOutcome() {
    return outcome;
  }


  public void setOutcome(LogOutcome outcome) {
    this.outcome = outcome;
  }


  public SystemLog published(OffsetDateTime published) {
    
    this.published = published;
    return this;
  }

   /**
   * Represents when Published in the Okta API
   * @return published
  **/
  @jakarta.annotation.Nullable
  public OffsetDateTime getPublished() {
    return published;
  }


  public void setPublished(OffsetDateTime published) {
    this.published = published;
  }


  public SystemLog request(LogRequest request) {
    
    this.request = request;
    return this;
  }

   /**
   * Get request
   * @return request
  **/
  @jakarta.annotation.Nullable
  public LogRequest getRequest() {
    return request;
  }


  public void setRequest(LogRequest request) {
    this.request = request;
  }


  public SystemLog securityContext(LogSecurityContext securityContext) {
    
    this.securityContext = securityContext;
    return this;
  }

   /**
   * Get securityContext
   * @return securityContext
  **/
  @jakarta.annotation.Nullable
  public LogSecurityContext getSecurityContext() {
    return securityContext;
  }


  public void setSecurityContext(LogSecurityContext securityContext) {
    this.securityContext = securityContext;
  }


  public SystemLog severity(LogSeverity severity) {
    
    this.severity = severity;
    return this;
  }

   /**
   * Get severity
   * @return severity
  **/
  @jakarta.annotation.Nullable
  public LogSeverity getSeverity() {
    return severity;
  }


  public void setSeverity(LogSeverity severity) {
    this.severity = severity;
  }


  public SystemLog target(List<LogTarget> target) {
    
    this.target = target;
    return this;
  }

  public SystemLog addTargetItem(LogTarget targetItem) {
    if (this.target == null) {
      this.target = new ArrayList<>();
    }
    this.target.add(targetItem);
    return this;
  }

   /**
   * Represents a LogTarget resource in the Okta API
   * @return target
  **/
  @jakarta.annotation.Nullable
  public List<LogTarget> getTarget() {
    return target;
  }


  public void setTarget(List<LogTarget> target) {
    this.target = target;
  }


  public SystemLog transaction(LogTransaction transaction) {
    
    this.transaction = transaction;
    return this;
  }

   /**
   * Get transaction
   * @return transaction
  **/
  @jakarta.annotation.Nullable
  public LogTransaction getTransaction() {
    return transaction;
  }


  public void setTransaction(LogTransaction transaction) {
    this.transaction = transaction;
  }


  public SystemLog uuid(String uuid) {
    
    this.uuid = uuid;
    return this;
  }

   /**
   * Represents Uuid in the Okta API
   * @return uuid
  **/
  @jakarta.annotation.Nullable
  public String getUuid() {
    return uuid;
  }


  public void setUuid(String uuid) {
    this.uuid = uuid;
  }


  public SystemLog version(String version) {
    
    this.version = version;
    return this;
  }

   /**
   * Represents a Version in the Okta API
   * @return version
  **/
  @jakarta.annotation.Nullable
  public String getVersion() {
    return version;
  }


  public void setVersion(String version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SystemLog systemLog = (SystemLog) o;
    return Objects.equals(this.actor, systemLog.actor) &&
        Objects.equals(this.authenticationContext, systemLog.authenticationContext) &&
        Objects.equals(this.clientInfo, systemLog.clientInfo) &&
        Objects.equals(this.debugContext, systemLog.debugContext) &&
        Objects.equals(this.displayMessage, systemLog.displayMessage) &&
        Objects.equals(this.eventType, systemLog.eventType) &&
        Objects.equals(this.legacyEventType, systemLog.legacyEventType) &&
        Objects.equals(this.outcome, systemLog.outcome) &&
        Objects.equals(this.published, systemLog.published) &&
        Objects.equals(this.request, systemLog.request) &&
        Objects.equals(this.securityContext, systemLog.securityContext) &&
        Objects.equals(this.severity, systemLog.severity) &&
        Objects.equals(this.target, systemLog.target) &&
        Objects.equals(this.transaction, systemLog.transaction) &&
        Objects.equals(this.uuid, systemLog.uuid) &&
        Objects.equals(this.version, systemLog.version);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(actor, authenticationContext, clientInfo, debugContext, displayMessage, eventType, legacyEventType, outcome, published, request, securityContext, severity, target, transaction, uuid, version);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SystemLog {\n");
    sb.append("    actor: ").append(toIndentedString(actor)).append("\n");
    sb.append("    authenticationContext: ").append(toIndentedString(authenticationContext)).append("\n");
    sb.append("    clientInfo: ").append(toIndentedString(clientInfo)).append("\n");
    sb.append("    debugContext: ").append(toIndentedString(debugContext)).append("\n");
    sb.append("    displayMessage: ").append(toIndentedString(displayMessage)).append("\n");
    sb.append("    eventType: ").append(toIndentedString(eventType)).append("\n");
    sb.append("    legacyEventType: ").append(toIndentedString(legacyEventType)).append("\n");
    sb.append("    outcome: ").append(toIndentedString(outcome)).append("\n");
    sb.append("    published: ").append(toIndentedString(published)).append("\n");
    sb.append("    request: ").append(toIndentedString(request)).append("\n");
    sb.append("    securityContext: ").append(toIndentedString(securityContext)).append("\n");
    sb.append("    severity: ").append(toIndentedString(severity)).append("\n");
    sb.append("    target: ").append(toIndentedString(target)).append("\n");
    sb.append("    transaction: ").append(toIndentedString(transaction)).append("\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("actor");
    openapiFields.add("authenticationContext");
    openapiFields.add("clientInfo");
    openapiFields.add("debugContext");
    openapiFields.add("displayMessage");
    openapiFields.add("eventType");
    openapiFields.add("legacyEventType");
    openapiFields.add("outcome");
    openapiFields.add("published");
    openapiFields.add("request");
    openapiFields.add("securityContext");
    openapiFields.add("severity");
    openapiFields.add("target");
    openapiFields.add("transaction");
    openapiFields.add("uuid");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to SystemLog
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SystemLog.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SystemLog is not found in the empty JSON string", SystemLog.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `actor`
      if (jsonObj.get("actor") != null && !jsonObj.get("actor").isJsonNull()) {
        LogActor.validateJsonElement(jsonObj.get("actor"));
      }
      // validate the optional field `authenticationContext`
      if (jsonObj.get("authenticationContext") != null && !jsonObj.get("authenticationContext").isJsonNull()) {
        LogAuthenticationContext.validateJsonElement(jsonObj.get("authenticationContext"));
      }
      // validate the optional field `clientInfo`
      if (jsonObj.get("clientInfo") != null && !jsonObj.get("clientInfo").isJsonNull()) {
        LogClientInfo.validateJsonElement(jsonObj.get("clientInfo"));
      }
      // validate the optional field `debugContext`
      if (jsonObj.get("debugContext") != null && !jsonObj.get("debugContext").isJsonNull()) {
        LogDebugContext.validateJsonElement(jsonObj.get("debugContext"));
      }
      if ((jsonObj.get("displayMessage") != null && !jsonObj.get("displayMessage").isJsonNull()) && !jsonObj.get("displayMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayMessage").toString()));
      }
      if ((jsonObj.get("eventType") != null && !jsonObj.get("eventType").isJsonNull()) && !jsonObj.get("eventType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eventType").toString()));
      }
      if ((jsonObj.get("legacyEventType") != null && !jsonObj.get("legacyEventType").isJsonNull()) && !jsonObj.get("legacyEventType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `legacyEventType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("legacyEventType").toString()));
      }
      // validate the optional field `outcome`
      if (jsonObj.get("outcome") != null && !jsonObj.get("outcome").isJsonNull()) {
        LogOutcome.validateJsonElement(jsonObj.get("outcome"));
      }
      // validate the optional field `request`
      if (jsonObj.get("request") != null && !jsonObj.get("request").isJsonNull()) {
        LogRequest.validateJsonElement(jsonObj.get("request"));
      }
      // validate the optional field `securityContext`
      if (jsonObj.get("securityContext") != null && !jsonObj.get("securityContext").isJsonNull()) {
        LogSecurityContext.validateJsonElement(jsonObj.get("securityContext"));
      }
      // validate the optional field `severity`
      if (jsonObj.get("severity") != null && !jsonObj.get("severity").isJsonNull()) {
        LogSeverity.validateJsonElement(jsonObj.get("severity"));
      }
      if (jsonObj.get("target") != null && !jsonObj.get("target").isJsonNull()) {
        JsonArray jsonArraytarget = jsonObj.getAsJsonArray("target");
        if (jsonArraytarget != null) {
          // ensure the json data is an array
          if (!jsonObj.get("target").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `target` to be an array in the JSON string but got `%s`", jsonObj.get("target").toString()));
          }

          // validate the optional field `target` (array)
          for (int i = 0; i < jsonArraytarget.size(); i++) {
            LogTarget.validateJsonElement(jsonArraytarget.get(i));
          };
        }
      }
      // validate the optional field `transaction`
      if (jsonObj.get("transaction") != null && !jsonObj.get("transaction").isJsonNull()) {
        LogTransaction.validateJsonElement(jsonObj.get("transaction"));
      }
      if ((jsonObj.get("uuid") != null && !jsonObj.get("uuid").isJsonNull()) && !jsonObj.get("uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uuid").toString()));
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SystemLog.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SystemLog' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SystemLog> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SystemLog.class));

       return (TypeAdapter<T>) new TypeAdapter<SystemLog>() {
           @Override
           public void write(JsonWriter out, SystemLog value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SystemLog read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SystemLog given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SystemLog
  * @throws IOException if the JSON string is invalid with respect to SystemLog
  */
  public static SystemLog fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SystemLog.class);
  }

 /**
  * Convert an instance of SystemLog to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
